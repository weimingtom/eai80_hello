<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\ugelis_demo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\ugelis_demo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sun Nov 19 12:35:47 2023
<BR><P>
<H3>Maximum Stack Usage =        368 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
work_timeout &rArr; k_work_submit_to_queue &rArr; k_queue_append &rArr; queue_insert &rArr; z_thread_malloc &rArr; k_mem_pool_malloc &rArr; k_mem_pool_alloc &rArr; _pend_current_thread &rArr; pend &rArr; _add_thread_timeout &rArr; _add_timeout &rArr; _handle_one_expired_timeout &rArr; _ready_thread &rArr; _add_thread_to_ready_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[1ec]">fp_register_touch</a>
 <LI><a href="#[9]">__pendsv</a>
 <LI><a href="#[7]">__svc</a>
 <LI><a href="#[b]">_isr_wrapper</a>
 <LI><a href="#[15f]">_CpuIdleInit</a>
 <LI><a href="#[1f7]">k_cpu_idle</a>
 <LI><a href="#[264]">k_cpu_atomic_idle</a>
 <LI><a href="#[1ed]">_SysNmiOnReset</a>
 <LI><a href="#[b8]">_ExcExit</a>
 <LI><a href="#[1ea]">_IntExit</a>
 <LI><a href="#[4]">__bus_fault</a>
 <LI><a href="#[8]">__debug_monitor</a>
 <LI><a href="#[2]">__hard_fault</a>
 <LI><a href="#[3]">__mpu_fault</a>
 <LI><a href="#[6]">__reserved</a>
 <LI><a href="#[5]">__usage_fault</a>
 <LI><a href="#[0]">__reset</a>
 <LI><a href="#[26c]">__start</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1ed]">_SysNmiOnReset</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1ed]">_SysNmiOnReset</a><BR>
 <LI><a href="#[1db]">block_free</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1db]">block_free</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[d]">UART_RxDMACallback</a> from gm_hal_uart.o(.text) referenced from gm_hal_uart.o(.text)
 <LI><a href="#[e]">UART_TxDMACallback</a> from gm_hal_uart.o(.text) referenced from gm_hal_uart.o(.text)
 <LI><a href="#[4]">__bus_fault</a> from fault_s.o(.text.__fault) referenced from vector_table.o(.exc_vector_table._vector_table_section)
 <LI><a href="#[8]">__debug_monitor</a> from fault_s.o(.text.__fault) referenced from vector_table.o(.exc_vector_table._vector_table_section)
 <LI><a href="#[2]">__hard_fault</a> from fault_s.o(.text.__fault) referenced from vector_table.o(.exc_vector_table._vector_table_section)
 <LI><a href="#[3]">__mpu_fault</a> from fault_s.o(.text.__fault) referenced from vector_table.o(.exc_vector_table._vector_table_section)
 <LI><a href="#[1]">__nmi</a> from nmi.o(.text) referenced from vector_table.o(.exc_vector_table._vector_table_section)
 <LI><a href="#[9]">__pendsv</a> from swap_helper.o(.text) referenced from vector_table.o(.exc_vector_table._vector_table_section)
 <LI><a href="#[6]">__reserved</a> from fault_s.o(.text.__fault) referenced 5 times from vector_table.o(.exc_vector_table._vector_table_section)
 <LI><a href="#[0]">__reset</a> from reset.o(.text._reset_section) referenced from vector_table.o(.exc_vector_table._vector_table_section)
 <LI><a href="#[7]">__svc</a> from swap_helper.o(.text) referenced from vector_table.o(.exc_vector_table._vector_table_section)
 <LI><a href="#[5]">__usage_fault</a> from fault_s.o(.text.__fault) referenced from vector_table.o(.exc_vector_table._vector_table_section)
 <LI><a href="#[19]">_do_kernel_oops</a> from fatal.o(.text) referenced from swap_helper.o(.text)
 <LI><a href="#[18]">_irq_do_offload</a> from irq_offload.o(.text) referenced from swap_helper.o(.text)
 <LI><a href="#[39]">_irq_spurious</a> from irq_manage.o(.text) referenced 80 times from isr_tables.o(.data)
 <LI><a href="#[b]">_isr_wrapper</a> from isr_wrapper.o(.text) referenced 80 times from isr_tables.o(.irq_vector_table)
 <LI><a href="#[37]">_nop_char_out</a> from printk.o(.text) referenced from printk.o(.data)
 <LI><a href="#[38]">_stdout_hook_default</a> from stdout_console.o(.text) referenced from stdout_console.o(.data)
 <LI><a href="#[4d]">_sys_clock_driver_init</a> from cortex_m_systick.o(.text) referenced from sys_clock_init.o(.devconfig.init)
 <LI><a href="#[1a]">_thread_entry</a> from thread_entry.o(.text) referenced from thread_1.o(.text)
 <LI><a href="#[a]">_timer_int_handler</a> from cortex_m_systick.o(.text) referenced from vector_table.o(.exc_vector_table._vector_table_section)
 <LI><a href="#[13]">bg_thread_main</a> from init.o(.text) referenced from init.o(.text)
 <LI><a href="#[16]">char_out</a> from printk.o(.text) referenced from printk.o(.text)
 <LI><a href="#[10]">console_out</a> from uart_console.o(.text) referenced from uart_console.o(.text)
 <LI><a href="#[3b]">device_pm_control_nop</a> from device.o(.text) referenced 30 times from soc.o(.devconfig.init)
 <LI><a href="#[3a]">gm6721x_init</a> from soc.o(.text) referenced from soc.o(.devconfig.init)
 <LI><a href="#[3d]">gm_pinmux_pm_control</a> from pinmux.o(.text) referenced from pinmux.o(.devconfig.init)
 <LI><a href="#[3f]">gm_uart_pm_control</a> from uart_gm.o(.text) referenced 4 times from uart_gm.o(.devconfig.init)
 <LI><a href="#[41]">gpio_gm_a_init</a> from gpio_gm.o(.text) referenced from gpio_gm.o(.devconfig.init)
 <LI><a href="#[42]">gpio_gm_b_init</a> from gpio_gm.o(.text) referenced from gpio_gm.o(.devconfig.init)
 <LI><a href="#[43]">gpio_gm_c_init</a> from gpio_gm.o(.text) referenced from gpio_gm.o(.devconfig.init)
 <LI><a href="#[2d]">gpio_gm_config</a> from gpio_gm.o(.text) referenced from gpio_gm.o(.constdata)
 <LI><a href="#[44]">gpio_gm_d_init</a> from gpio_gm.o(.text) referenced from gpio_gm.o(.devconfig.init)
 <LI><a href="#[32]">gpio_gm_disable_callback</a> from gpio_gm.o(.text) referenced from gpio_gm.o(.constdata)
 <LI><a href="#[45]">gpio_gm_e_init</a> from gpio_gm.o(.text) referenced from gpio_gm.o(.devconfig.init)
 <LI><a href="#[31]">gpio_gm_enable_callback</a> from gpio_gm.o(.text) referenced from gpio_gm.o(.constdata)
 <LI><a href="#[46]">gpio_gm_f_init</a> from gpio_gm.o(.text) referenced from gpio_gm.o(.devconfig.init)
 <LI><a href="#[47]">gpio_gm_g_init</a> from gpio_gm.o(.text) referenced from gpio_gm.o(.devconfig.init)
 <LI><a href="#[48]">gpio_gm_h_init</a> from gpio_gm.o(.text) referenced from gpio_gm.o(.devconfig.init)
 <LI><a href="#[49]">gpio_gm_i_init</a> from gpio_gm.o(.text) referenced from gpio_gm.o(.devconfig.init)
 <LI><a href="#[4a]">gpio_gm_j_init</a> from gpio_gm.o(.text) referenced from gpio_gm.o(.devconfig.init)
 <LI><a href="#[4b]">gpio_gm_k_init</a> from gpio_gm.o(.text) referenced from gpio_gm.o(.devconfig.init)
 <LI><a href="#[30]">gpio_gm_manage_callback</a> from gpio_gm.o(.text) referenced from gpio_gm.o(.constdata)
 <LI><a href="#[11]">gpio_gm_port_isr</a> from gpio_gm.o(.text) referenced from gpio_gm.o(.text)
 <LI><a href="#[2f]">gpio_gm_read</a> from gpio_gm.o(.text) referenced from gpio_gm.o(.constdata)
 <LI><a href="#[2e]">gpio_gm_write</a> from gpio_gm.o(.text) referenced from gpio_gm.o(.constdata)
 <LI><a href="#[12]">idle</a> from idle.o(.text) referenced from init.o(.text)
 <LI><a href="#[4e]">init_mbox_module</a> from mailbox.o(.text) referenced from mailbox.o(.devconfig.init)
 <LI><a href="#[4f]">init_mem_slab_module</a> from mem_slab.o(.text) referenced from mem_slab.o(.devconfig.init)
 <LI><a href="#[51]">init_pipes_module</a> from pipes.o(.text) referenced from pipes.o(.devconfig.init)
 <LI><a href="#[50]">init_static_pools</a> from mempool.o(.text) referenced from mempool.o(.devconfig.init)
 <LI><a href="#[52]">k_sys_work_q_init</a> from system_work_q.o(.text) referenced from system_work_q.o(.devconfig.init)
 <LI><a href="#[c]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[34]">pinmux_gm_get</a> from pinmux_gm.o(.text) referenced from pinmux_gm.o(.constdata)
 <LI><a href="#[4c]">pinmux_gm_init</a> from pinmux_gm.o(.text) referenced 11 times from pinmux_gm.o(.devconfig.init)
 <LI><a href="#[3c]">pinmux_gm_initialize</a> from pinmux.o(.text) referenced from pinmux.o(.devconfig.init)
 <LI><a href="#[36]">pinmux_gm_input</a> from pinmux_gm.o(.text) referenced from pinmux_gm.o(.constdata)
 <LI><a href="#[35]">pinmux_gm_pullup</a> from pinmux_gm.o(.text) referenced from pinmux_gm.o(.constdata)
 <LI><a href="#[33]">pinmux_gm_set</a> from pinmux_gm.o(.text) referenced from pinmux_gm.o(.constdata)
 <LI><a href="#[17]">str_out</a> from printk.o(.text) referenced from printk.o(.text)
 <LI><a href="#[40]">uart_console_init</a> from uart_console.o(.text) referenced from uart_console.o(.devconfig.init)
 <LI><a href="#[1e]">uart_gm_err_check</a> from uart_gm.o(.text) referenced from uart_gm.o(.constdata)
 <LI><a href="#[1f]">uart_gm_fifo_fill</a> from uart_gm.o(.text) referenced from uart_gm.o(.constdata)
 <LI><a href="#[20]">uart_gm_fifo_read</a> from uart_gm.o(.text) referenced from uart_gm.o(.constdata)
 <LI><a href="#[3e]">uart_gm_init</a> from uart_gm.o(.text) referenced 4 times from uart_gm.o(.devconfig.init)
 <LI><a href="#[2c]">uart_gm_irq_callback_set</a> from uart_gm.o(.text) referenced from uart_gm.o(.constdata)
 <LI><a href="#[1b]">uart_gm_irq_config</a> from uart_gm.o(.text) referenced 4 times from uart_gm.o(.constdata)
 <LI><a href="#[29]">uart_gm_irq_err_disable</a> from uart_gm.o(.text) referenced from uart_gm.o(.constdata)
 <LI><a href="#[28]">uart_gm_irq_err_enable</a> from uart_gm.o(.text) referenced from uart_gm.o(.constdata)
 <LI><a href="#[2a]">uart_gm_irq_is_pending</a> from uart_gm.o(.text) referenced from uart_gm.o(.constdata)
 <LI><a href="#[25]">uart_gm_irq_rx_disable</a> from uart_gm.o(.text) referenced from uart_gm.o(.constdata)
 <LI><a href="#[24]">uart_gm_irq_rx_enable</a> from uart_gm.o(.text) referenced from uart_gm.o(.constdata)
 <LI><a href="#[27]">uart_gm_irq_rx_ready</a> from uart_gm.o(.text) referenced from uart_gm.o(.constdata)
 <LI><a href="#[26]">uart_gm_irq_tx_complete</a> from uart_gm.o(.text) referenced from uart_gm.o(.constdata)
 <LI><a href="#[22]">uart_gm_irq_tx_disable</a> from uart_gm.o(.text) referenced from uart_gm.o(.constdata)
 <LI><a href="#[21]">uart_gm_irq_tx_enable</a> from uart_gm.o(.text) referenced from uart_gm.o(.constdata)
 <LI><a href="#[23]">uart_gm_irq_tx_ready</a> from uart_gm.o(.text) referenced from uart_gm.o(.constdata)
 <LI><a href="#[2b]">uart_gm_irq_update</a> from uart_gm.o(.text) referenced from uart_gm.o(.constdata)
 <LI><a href="#[f]">uart_gm_isr</a> from uart_gm.o(.text) referenced from uart_gm.o(.text)
 <LI><a href="#[1c]">uart_gm_poll_in</a> from uart_gm.o(.text) referenced from uart_gm.o(.constdata)
 <LI><a href="#[1d]">uart_gm_poll_out</a> from uart_gm.o(.text) referenced from uart_gm.o(.constdata)
 <LI><a href="#[14]">work_q_main</a> from work_q.o(.text) referenced from work_q.o(.text)
 <LI><a href="#[15]">work_timeout</a> from work_q.o(.text) referenced from work_q.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[53]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))

<P><STRONG><a name="[221]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[54]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[21f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[222]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[223]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[224]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[225]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[226]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[c]"></a>main</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = main &rArr; printk &rArr; vprintk &rArr; _vprintk &rArr; _printk_dec_ulong
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printk
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bg_thread_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[58]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, soc_gm6721x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SystemInit &rArr; sysClkInit &rArr; HAL_CLOCK_SYSCLKConfig &rArr; HAL_CLOCK_AdjustPLLKDPDefaultDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysClkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gm6721x_init
</UL>

<P><STRONG><a name="[67]"></a>HAL_IrqUnlock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gm_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UnLock
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TryLock
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LockInit
</UL>

<P><STRONG><a name="[66]"></a>HAL_IrqLock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gm_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UnLock
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TryLock
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LockInit
</UL>

<P><STRONG><a name="[65]"></a>HAL_LockInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_LockInit
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IrqLock
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IrqUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[68]"></a>HAL_TryLock</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TryLock
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IrqLock
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IrqUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_GetTransferStatus
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TransferConfig
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Reset_Module
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Reset_ClearRestCause
</UL>

<P><STRONG><a name="[69]"></a>HAL_UnLock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UnLock
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IrqLock
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IrqUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_GetTransferStatus
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TransferConfig
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Reset_Module
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Reset_ClearRestCause
</UL>

<P><STRONG><a name="[227]"></a>HAL_GetTick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gm_common.o(.text), UNUSED)

<P><STRONG><a name="[228]"></a>HAL_DelayMs</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gm_common.o(.text), UNUSED)

<P><STRONG><a name="[229]"></a>HAL_DelayUs</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gm_common.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>HAL_DisableIrq</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gm_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ICACHE_Enable
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ICACHE_Disable
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCACHE_InvalidAll
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCACHE_Enable
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCACHE_Disable
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCACHE_InvalidLine
</UL>

<P><STRONG><a name="[1f0]"></a>HAL_EnableIrq</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gm_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ICACHE_Enable
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ICACHE_Disable
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCACHE_InvalidAll
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCACHE_Enable
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCACHE_Disable
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCACHE_InvalidLine
</UL>

<P><STRONG><a name="[6a]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gm_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CommonIRQHandler
</UL>

<P><STRONG><a name="[83]"></a>HAL_DMA_Request_Channel</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, gm_hal_dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAConfig
</UL>

<P><STRONG><a name="[6c]"></a>HAL_DMA_Init</STRONG> (Thumb, 764 bytes, Stack size 24 bytes, gm_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Reset_Module
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_PeripheralClockEnable0
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_InitHandle
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_HostIrqConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAConfig
</UL>

<P><STRONG><a name="[71]"></a>HAL_DMA_Abort</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, gm_hal_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxDMACallback
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxDMACallback
</UL>

<P><STRONG><a name="[85]"></a>HAL_DMA_Start</STRONG> (Thumb, 612 bytes, Stack size 28 bytes, gm_hal_dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[22a]"></a>HAL_DMA_MultiBuffer_Start</STRONG> (Thumb, 614 bytes, Stack size 32 bytes, gm_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>HAL_UART_Init</STRONG> (Thumb, 694 bytes, Stack size 24 bytes, gm_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Init &rArr; HAL_Reset_Module &rArr; HAL_TryLock
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_PeripheralClockEnable2
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_PeripheralClkSetConfig
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Reset_Module
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gm_init
</UL>

<P><STRONG><a name="[22b]"></a>HAL_UART_DeInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gm_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[22c]"></a>HAL_UART_SetMode</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, gm_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>HAL_UART_TransferConfig</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, gm_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_GetChar
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Clear_IS_RFT
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Clear_IS_TFT
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Is_LS_TXE
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UnLock
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TryLock
</UL>

<P><STRONG><a name="[7b]"></a>HAL_UART_EnableInterrupts</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, gm_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UART_EnableInterrupts
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Enable_RxErr_Interrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gm_irq_rx_enable
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gm_irq_tx_enable
</UL>

<P><STRONG><a name="[7d]"></a>HAL_UART_DisableInterrupts</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, gm_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UART_DisableInterrupts
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Disable_RxErr_Interrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gm_irq_rx_disable
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gm_irq_tx_disable
</UL>

<P><STRONG><a name="[84]"></a>HAL_UART_Transmit</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, gm_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAConfig
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_data
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UnLock
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TryLock
</UL>

<P><STRONG><a name="[88]"></a>HAL_UART_Receive</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, gm_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Is_LS_RXES
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_data
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAConfig
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UnLock
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TryLock
</UL>

<P><STRONG><a name="[8a]"></a>HAL_UART_GetTransferStatus</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, gm_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Is_LS_TXE
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UnLock
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TryLock
</UL>

<P><STRONG><a name="[8d]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, gm_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_GetChar
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Is_IS_RFTO
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Is_IS_RFT
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Clear_IS_RFT
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Is_IS_TFT
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Clear_IS_TFT
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Is_LS_RXES
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Is_IS_OPFB
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Clear_IS_OPFB
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Is_IE_OPFB
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Is_LS_RXDA
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Is_IS_RXDA
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Clear_IS_TXHE
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Is_IS_TXHE
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Is_IE_TXHE
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxInterruptHandler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxInterruptHandler
</UL>

<P><STRONG><a name="[b5]"></a>HAL_UART_Tx_Complete</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gm_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gm_irq_tx_complete
</UL>

<P><STRONG><a name="[98]"></a>HAL_UART_TxInt_Enabled</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gm_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_TxInt_Enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Is_IE_TXHE
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gm_irq_is_pending
</UL>

<P><STRONG><a name="[99]"></a>HAL_UART_TxInt_Ready</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gm_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_TxInt_Ready
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Is_IS_TXHE
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gm_irq_is_pending
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gm_irq_tx_ready
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gm_isr
</UL>

<P><STRONG><a name="[9a]"></a>HAL_UART_Clear_TxInt</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gm_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Clear_TxInt
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Clear_IS_TXHE
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gm_isr
</UL>

<P><STRONG><a name="[9b]"></a>HAL_UART_TxFifoInt_Ready</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gm_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Is_IS_TFT
</UL>

<P><STRONG><a name="[22d]"></a>HAL_UART_TxFifoInt_Enabled</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gm_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>HAL_UART_Clear_TxFifoInt</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gm_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Clear_IS_TFT
</UL>

<P><STRONG><a name="[22e]"></a>HAL_UART_Get_TxFifo_DataSize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gm_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>HAL_UART_RxInt_Enabled</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gm_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gm_irq_is_pending
</UL>

<P><STRONG><a name="[9d]"></a>HAL_UART_RxInt_Ready</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gm_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_RxInt_Ready
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Is_IS_RXDA
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gm_irq_is_pending
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gm_irq_rx_ready
</UL>

<P><STRONG><a name="[9e]"></a>HAL_UART_DataReady</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gm_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_DataReady
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Is_LS_RXDA
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gm_poll_in
</UL>

<P><STRONG><a name="[9f]"></a>HAL_UART_RxFifoTmo_Ready</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gm_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Is_IS_RFTO
</UL>

<P><STRONG><a name="[a0]"></a>HAL_UART_RxFifoInt_Ready</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gm_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Is_IS_RFT
</UL>

<P><STRONG><a name="[a1]"></a>HAL_UART_Clear_RxFifoInt</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gm_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Clear_IS_RFT
</UL>

<P><STRONG><a name="[22f]"></a>HAL_UART_Get_RxFifo_DataSize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gm_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>HAL_UART_Enable_Error_Interrupts</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gm_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Enable_Error_Interrupts
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Enable_RxErr_Interrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gm_irq_err_enable
</UL>

<P><STRONG><a name="[a3]"></a>HAL_UART_Disable_Error_Interrupts</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gm_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Disable_Error_Interrupts
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Disable_RxErr_Interrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gm_irq_err_disable
</UL>

<P><STRONG><a name="[a4]"></a>HAL_UART_Error_Enabled</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gm_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Error_Enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Is_IE_OPFB
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gm_err_check
</UL>

<P><STRONG><a name="[a5]"></a>HAL_UART_Error_Ready</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gm_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Error_Ready
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Is_IS_OPFB
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gm_isr
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gm_err_check
</UL>

<P><STRONG><a name="[a6]"></a>HAL_UART_Clear_ErrInt</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gm_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Clear_ErrInt
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Clear_IS_OPFB
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gm_isr
</UL>

<P><STRONG><a name="[230]"></a>HAL_UART_Fifo_Enabled</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gm_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>HAL_UART_PutChar</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gm_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UART_PutChar
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_PutChar
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Is_LS_TXHE
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gm_fifo_fill
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gm_poll_out
</UL>

<P><STRONG><a name="[a8]"></a>HAL_UART_GetChar</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gm_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_GetChar
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_GetChar
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gm_fifo_read
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gm_poll_in
</UL>

<P><STRONG><a name="[231]"></a>HAL_UART_GetIsrFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gm_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[232]"></a>HAL_UART_ClearIsrFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gm_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[233]"></a>HAL_GPIOA_InterruptHandler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gm_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[234]"></a>HAL_GPIOB_InterruptHandler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gm_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[235]"></a>HAL_GPIOC_InterruptHandler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gm_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[236]"></a>HAL_GPIOD_InterruptHandler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gm_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[237]"></a>HAL_GPIOE_InterruptHandler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gm_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[238]"></a>HAL_GPIOF_InterruptHandler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gm_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[239]"></a>HAL_GPIOG_InterruptHandler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gm_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[23a]"></a>HAL_GPIOH_InterruptHandler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gm_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[23b]"></a>HAL_GPIOI_InterruptHandler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gm_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[23c]"></a>HAL_GPIOJ_InterruptHandler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gm_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>HAL_GPIOK_InterruptHandler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gm_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>HAL_GPIO_SW_Reset</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gm_hal_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_SW_Reset &rArr; HAL_Reset_Module &rArr; HAL_TryLock
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Reset_Module
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_clk_rst_init
</UL>

<P><STRONG><a name="[aa]"></a>HAL_GPIO_CLK_ENABLE</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gm_hal_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_CLK_ENABLE
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_PeripheralClockEnable0
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_clk_rst_init
</UL>

<P><STRONG><a name="[ab]"></a>HAL_GPIO_CLK_DISABLE</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gm_hal_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_PeripheralClockDisable0
</UL>

<P><STRONG><a name="[b0]"></a>HAL_GPIO_RequestIrq</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, gm_hal_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>

<P><STRONG><a name="[ad]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, gm_hal_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>

<P><STRONG><a name="[af]"></a>HAL_GPIO_Init</STRONG> (Thumb, 802 bytes, Stack size 40 bytes, gm_hal_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_GPIO_Init &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_RequestIrq
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_CLK_ENABLE
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_SW_Reset
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_gm_set
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_config
</UL>

<P><STRONG><a name="[c8]"></a>HAL_GPIO_PinWrite</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gm_hal_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_write
</UL>

<P><STRONG><a name="[c9]"></a>HAL_GPIO_PinRead</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gm_hal_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_read
</UL>

<P><STRONG><a name="[23e]"></a>HAL_GPIO_PinToggle</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gm_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[23f]"></a>HAL_GPIO_SetPinDirection</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, gm_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>HAL_GPIO_PesConfig</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, gm_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>HAL_GPIO_SetPinFilter</STRONG> (Thumb, 932 bytes, Stack size 40 bytes, gm_hal_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_GetInstance
</UL>

<P><STRONG><a name="[a]"></a>_timer_int_handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cortex_m_systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = _timer_int_handler &rArr; _nano_sys_clock_tick_announce &rArr; handle_timeouts &rArr; _handle_expired_timeouts &rArr; _handle_one_expired_timeout &rArr; _add_thread_to_ready_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nano_sys_clock_tick_announce
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExcExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_table.o(.exc_vector_table._vector_table_section)
</UL>
<P><STRONG><a name="[4d]"></a>_sys_clock_driver_init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, cortex_m_systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_clock_driver_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_clock_init.o(.devconfig.init)
</UL>
<P><STRONG><a name="[1aa]"></a>_timer_cycle_get_32</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, cortex_m_systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_rand32_get
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_busy_wait
</UL>

<P><STRONG><a name="[ba]"></a>uart_console_hook_install</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uart_console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_console_hook_install
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__stdout_hook_install
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printk_hook_install
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_console_init
</UL>

<P><STRONG><a name="[ce]"></a>k_mbox_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mailbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_waitq_init
</UL>

<P><STRONG><a name="[db]"></a>k_mbox_put</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mailbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox_message_put
</UL>

<P><STRONG><a name="[dc]"></a>k_mbox_async_put</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, mailbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_stack_pop
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox_message_put
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[de]"></a>k_mbox_data_get</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mailbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox_message_dispose
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbox_data_block_get
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox_message_data_check
</UL>

<P><STRONG><a name="[e0]"></a>k_mbox_data_block_get</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, mailbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mem_pool_alloc
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbox_data_get
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox_message_dispose
</UL>

<P><STRONG><a name="[e3]"></a>k_mbox_get</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, mailbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unpend_thread
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pend_current_thread
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox_message_data_check
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox_message_match
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_peek_next
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_peek_head
</UL>

<P><STRONG><a name="[e6]"></a>k_mem_slab_init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mem_slab.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_free_list
</UL>

<P><STRONG><a name="[e7]"></a>k_mem_slab_alloc</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, mem_slab.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pend_current_thread
</UL>

<P><STRONG><a name="[e8]"></a>k_mem_slab_free</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, mem_slab.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unpend_first_thread
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reschedule
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_thread_to_ready_q
</UL>

<P><STRONG><a name="[50]"></a>init_static_pools</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mempool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = init_static_pools &rArr; k_mem_pool_init &rArr; _sys_mem_pool_base_init &rArr; set_free_bit &rArr; get_bit_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mem_pool_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mempool.o(.devconfig.init)
</UL>
<P><STRONG><a name="[e1]"></a>k_mem_pool_alloc</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, mempool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = k_mem_pool_alloc &rArr; _pend_current_thread &rArr; pend &rArr; _add_thread_timeout &rArr; _add_timeout &rArr; _handle_one_expired_timeout &rArr; _ready_thread &rArr; _add_thread_to_ready_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tick_get
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_mem_pool_block_alloc
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pool_id
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pend_current_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mem_pool_malloc
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbox_data_block_get
</UL>

<P><STRONG><a name="[ef]"></a>k_mem_pool_free_id</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, mempool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = k_mem_pool_free_id &rArr; _sys_mem_pool_block_free &rArr; block_free &rArr;  block_free (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unpend_all
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_mem_pool_block_free
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pool
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reschedule
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_free
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mem_pool_free
</UL>

<P><STRONG><a name="[d1]"></a>k_mem_pool_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mempool.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mem_pool_free_id
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipe_async_finish
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox_message_dispose
</UL>

<P><STRONG><a name="[f3]"></a>k_mem_pool_malloc</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, mempool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = k_mem_pool_malloc &rArr; k_mem_pool_alloc &rArr; _pend_current_thread &rArr; pend &rArr; _add_thread_timeout &rArr; _add_timeout &rArr; _handle_one_expired_timeout &rArr; _ready_thread &rArr; _add_thread_to_ready_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mem_pool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;z_thread_malloc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_malloc
</UL>

<P><STRONG><a name="[f4]"></a>k_free</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mempool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = k_free &rArr; k_mem_pool_free_id &rArr; _sys_mem_pool_block_free &rArr; block_free &rArr;  block_free (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mem_pool_free_id
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_stack_cleanup
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;z_queue_node_peek
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_pipe_cleanup
</UL>

<P><STRONG><a name="[f5]"></a>k_malloc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mempool.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mem_pool_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_calloc
</UL>

<P><STRONG><a name="[f6]"></a>k_calloc</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, mempool.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_malloc
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[241]"></a>k_thread_system_pool_assign</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mempool.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>z_thread_malloc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mempool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = z_thread_malloc &rArr; k_mem_pool_malloc &rArr; k_mem_pool_alloc &rArr; _pend_current_thread &rArr; pend &rArr; _add_thread_timeout &rArr; _add_timeout &rArr; _handle_one_expired_timeout &rArr; _ready_thread &rArr; _add_thread_to_ready_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mem_pool_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_stack_alloc_init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_insert
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_pipe_alloc_init
</UL>

<P><STRONG><a name="[242]"></a>_impl_k_mutex_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mutex.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>_impl_k_mutex_lock</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_sched_unlock
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_owner_prio
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_prio_for_inheritance
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_lock
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_prio_higher
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pend_current_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mutex_lock
</UL>

<P><STRONG><a name="[100]"></a>_impl_k_mutex_unlock</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_sched_unlock
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_owner_prio
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_lock
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unpend_first_thread
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_thread_to_ready_q
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mutex_unlock
</UL>

<P><STRONG><a name="[108]"></a>k_pipe_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, pipes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_waitq_init
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_pipe_alloc_init
</UL>

<P><STRONG><a name="[10a]"></a>_impl_k_pipe_alloc_init</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, pipes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;z_thread_malloc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_pipe_init
</UL>

<P><STRONG><a name="[10b]"></a>k_pipe_cleanup</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, pipes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_free
</UL>

<P><STRONG><a name="[114]"></a>_k_pipe_put_internal</STRONG> (Thumb, 552 bytes, Stack size 88 bytes, pipes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipe_return_code
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipe_xfer_prepare
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipe_buffer_put
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipe_xfer
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipe_async_finish
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_lock
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ready_thread
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_get
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_sched_unlock
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reschedule
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pend_thread
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pend_current_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_pipe_block_put
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_pipe_put
</UL>

<P><STRONG><a name="[117]"></a>_impl_k_pipe_get</STRONG> (Thumb, 482 bytes, Stack size 104 bytes, pipes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipe_thread_ready
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipe_return_code
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipe_xfer_prepare
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipe_buffer_get
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipe_buffer_put
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipe_xfer
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_lock
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_get
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_sched_unlock
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pend_current_thread
</UL>

<P><STRONG><a name="[118]"></a>_impl_k_pipe_put</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, pipes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_pipe_put_internal
</UL>

<P><STRONG><a name="[119]"></a>k_pipe_block_put</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, pipes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipe_async_alloc
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_thread_priority_get
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_pipe_put_internal
</UL>

<P><STRONG><a name="[121]"></a>z_queue_node_peek</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = z_queue_node_peek &rArr; k_free &rArr; k_mem_pool_free_id &rArr; _sys_mem_pool_block_free &rArr; block_free &rArr;  block_free (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_free
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_queue_get
</UL>

<P><STRONG><a name="[1be]"></a>_impl_k_queue_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_work_q_start
</UL>

<P><STRONG><a name="[123]"></a>_impl_k_queue_cancel_wait</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unpend_first_thread
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reschedule
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_thread_to_run
</UL>

<P><STRONG><a name="[126]"></a>k_queue_insert</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_insert
</UL>

<P><STRONG><a name="[127]"></a>k_queue_append</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = k_queue_append &rArr; queue_insert &rArr; z_thread_malloc &rArr; k_mem_pool_malloc &rArr; k_mem_pool_alloc &rArr; _pend_current_thread &rArr; pend &rArr; _add_thread_timeout &rArr; _add_timeout &rArr; _handle_one_expired_timeout &rArr; _ready_thread &rArr; _add_thread_to_ready_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sflist_peek_tail
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_work_submit_to_queue
</UL>

<P><STRONG><a name="[128]"></a>k_queue_prepend</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_insert
</UL>

<P><STRONG><a name="[129]"></a>_impl_k_queue_alloc_append</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sflist_peek_tail
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_insert
</UL>

<P><STRONG><a name="[12a]"></a>_impl_k_queue_alloc_prepend</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_insert
</UL>

<P><STRONG><a name="[12b]"></a>k_queue_append_list</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unpend_first_thread
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reschedule
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sflist_peek_tail
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;z_sflist_tail_set
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;z_sflist_head_set
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;z_sfnode_next_set
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_thread_to_run
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_queue_merge_slist
</UL>

<P><STRONG><a name="[12c]"></a>k_queue_merge_slist</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_queue_append_list
</UL>

<P><STRONG><a name="[12d]"></a>_impl_k_queue_get</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _impl_k_queue_get &rArr; _pend_current_thread &rArr; pend &rArr; _add_thread_timeout &rArr; _add_timeout &rArr; _handle_one_expired_timeout &rArr; _ready_thread &rArr; _add_thread_to_ready_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pend_current_thread
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;z_queue_node_peek
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sflist_peek_tail
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sflist_peek_head
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;z_sflist_tail_set
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;z_sflist_head_set
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_q_main
</UL>

<P><STRONG><a name="[243]"></a>_impl_k_sem_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, sem.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>_sem_give_non_preemptible</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unpend_thread_no_timeout
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_find_first_thread_to_unpend
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increment_count_up_to_limit
</UL>

<P><STRONG><a name="[d2]"></a>_impl_k_sem_give</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reschedule
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sem_give
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipe_async_finish
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox_message_dispose
</UL>

<P><STRONG><a name="[133]"></a>_impl_k_sem_take</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pend_current_thread
</UL>

<P><STRONG><a name="[135]"></a>k_stack_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stack.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_stack_alloc_init
</UL>

<P><STRONG><a name="[134]"></a>_impl_k_stack_alloc_init</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, stack.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;z_thread_malloc
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_stack_init
</UL>

<P><STRONG><a name="[136]"></a>k_stack_cleanup</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stack.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_free
</UL>

<P><STRONG><a name="[e4]"></a>_impl_k_stack_push</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, stack.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _impl_k_stack_push &rArr; _unpend_first_thread &rArr; _unpend_thread_no_timeout &rArr; _priq_dumb_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unpend_first_thread
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reschedule
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_thread_to_ready_q
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_stack_push
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_stack_push
</UL>

<P><STRONG><a name="[dd]"></a>_impl_k_stack_pop</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, stack.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pend_current_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipe_async_alloc
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbox_async_put
</UL>

<P><STRONG><a name="[150]"></a>_sys_device_do_config_level</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_device_do_config_level
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bg_thread_main
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Cstart
</UL>

<P><STRONG><a name="[5d]"></a>device_get_binding</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = device_get_binding &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_gm_initialize
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c2_pinmux_config
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c0_pinmux_config
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_pinmux_config
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_pinmux_config
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_pinmux_config
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_pinmux_config
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_console_init
</UL>

<P><STRONG><a name="[3b]"></a>device_pm_control_nop</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, device.o(.text))
<BR>[Address Reference Count : 10]<UL><LI> mailbox.o(.devconfig.init)
<LI> mem_slab.o(.devconfig.init)
<LI> mempool.o(.devconfig.init)
<LI> soc.o(.devconfig.init)
<LI> gpio_gm.o(.devconfig.init)
<LI> sys_clock_init.o(.devconfig.init)
<LI> uart_console.o(.devconfig.init)
<LI> pinmux_gm.o(.devconfig.init)
<LI> pipes.o(.devconfig.init)
<LI> system_work_q.o(.devconfig.init)
</UL>
<P><STRONG><a name="[244]"></a>device_list_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, device.o(.text), UNUSED)

<P><STRONG><a name="[245]"></a>device_any_busy_check</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, device.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>device_busy_check</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_get
</UL>

<P><STRONG><a name="[13b]"></a>device_busy_set</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_or
</UL>

<P><STRONG><a name="[13d]"></a>device_busy_clear</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_and
</UL>

<P><STRONG><a name="[6e]"></a>HAL_Reset_Module</STRONG> (Thumb, 1270 bytes, Stack size 16 bytes, gm_hal_reset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Reset_Module &rArr; HAL_TryLock
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UnLock
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TryLock
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_SW_Reset
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[13f]"></a>HAL_Reset_ClearRestCause</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gm_hal_reset.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UnLock
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TryLock
</UL>

<P><STRONG><a name="[140]"></a>HAL_CLOCK_WaitForStable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gm_hal_clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_PeripheralClkSetConfig
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_SYSCLKConfig
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_PLLsReferenceClock
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_DeInit
</UL>

<P><STRONG><a name="[144]"></a>HAL_CLOCK_AdjustPLLKDPDefaultDiv</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, gm_hal_clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_CLOCK_AdjustPLLKDPDefaultDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_PeripheralClkSetConfig
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_SYSCLKConfig
</UL>

<P><STRONG><a name="[5b]"></a>HAL_CLOCK_SYSCLKConfig</STRONG> (Thumb, 302 bytes, Stack size 8 bytes, gm_hal_clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_CLOCK_SYSCLKConfig &rArr; HAL_CLOCK_AdjustPLLKDPDefaultDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_AdjustPLLKDPDefaultDiv
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_WaitForStable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_HIRCcmd
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_AdjustPLLKDPDefaultConfig
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_HOSCcmd
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_PLLcmd
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_PLLKDPcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysClkInit
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_DeInit
</UL>

<P><STRONG><a name="[147]"></a>HAL_CLOCK_DeInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, gm_hal_clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_SYSCLKConfig
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_WaitForStable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_HIRCcmd
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_HOSCcmd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_LOSCcmd
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_PLLcmd
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_PLLKDPcmd
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_PLLI2Scmd
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_PLLSAIcmd
</UL>

<P><STRONG><a name="[246]"></a>HAL_CLOCK_AdjustPLLDefaultDiv</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, gm_hal_clock.o(.text), UNUSED)

<P><STRONG><a name="[247]"></a>HAL_CLOCK_AdjustPLLsDefaultDivM</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gm_hal_clock.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>HAL_CLOCK_PLLsReferenceClock</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, gm_hal_clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CLOCK_PLLsReferenceClock
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_WaitForStable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_HIRCcmd
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_HOSCcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_PeripheralClkSetConfig
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysClkInit
</UL>

<P><STRONG><a name="[248]"></a>HAL_CLOCK_AdjustPLLI2SDefaultDiv</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, gm_hal_clock.o(.text), UNUSED)

<P><STRONG><a name="[249]"></a>HAL_CLOCK_AdjustPLLSAIDefaultDiv</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, gm_hal_clock.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>HAL_CLOCK_ClockCmd</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, gm_hal_clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_LIRCcmd
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_HIRCcmd
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_HOSCcmd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_LOSCcmd
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_PLLcmd
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_PLLKDPcmd
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_PLLI2Scmd
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_PLLSAIcmd
</UL>

<P><STRONG><a name="[14e]"></a>HAL_CLOCK_GetSYSCLKConfig</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gm_hal_clock.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_GetSYSCLKFreq
</UL>

<P><STRONG><a name="[14d]"></a>HAL_CLOCK_GetSYSCLKFreq</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, gm_hal_clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_GetSYSCLKConfig
</UL>

<P><STRONG><a name="[6d]"></a>HAL_CLOCK_PeripheralClockEnable0</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gm_hal_clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_CLK_ENABLE
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[ac]"></a>HAL_CLOCK_PeripheralClockDisable0</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gm_hal_clock.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_CLK_DISABLE
</UL>

<P><STRONG><a name="[24a]"></a>HAL_CLOCK_PeripheralClockEnable1</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gm_hal_clock.o(.text), UNUSED)

<P><STRONG><a name="[24b]"></a>HAL_CLOCK_PeripheralClockDisable1</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gm_hal_clock.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>HAL_CLOCK_PeripheralClockEnable2</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gm_hal_clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[24c]"></a>HAL_CLOCK_PeripheralClockDisable2</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gm_hal_clock.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>HAL_CLOCK_PeripheralClkSetConfig</STRONG> (Thumb, 2698 bytes, Stack size 8 bytes, gm_hal_clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_CLOCK_PeripheralClkSetConfig &rArr; HAL_CLOCK_AdjustPLLKDPDefaultDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_PLLsReferenceClock
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_AdjustPLLKDPDefaultDiv
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_WaitForStable
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_LIRCcmd
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_HIRCcmd
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_AdjustPLLKDPDefaultConfig
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_HOSCcmd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_LOSCcmd
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_PLLcmd
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_PLLKDPcmd
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_PLLI2Scmd
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_PLLSAIcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[24d]"></a>atomic_cas</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, atomic_c.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>atomic_add</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, atomic_c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_rand32_get
</UL>

<P><STRONG><a name="[24e]"></a>atomic_sub</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, atomic_c.o(.text), UNUSED)

<P><STRONG><a name="[24f]"></a>atomic_inc</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, atomic_c.o(.text), UNUSED)

<P><STRONG><a name="[250]"></a>atomic_dec</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, atomic_c.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>atomic_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, atomic_c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_busy_check
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_cancel
</UL>

<P><STRONG><a name="[251]"></a>atomic_set</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, atomic_c.o(.text), UNUSED)

<P><STRONG><a name="[252]"></a>atomic_clear</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, atomic_c.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>atomic_or</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, atomic_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atomic_or
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_busy_set
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_work_submit_to_queue
</UL>

<P><STRONG><a name="[253]"></a>atomic_xor</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, atomic_c.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>atomic_and</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, atomic_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atomic_and
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_busy_clear
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_cancel
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_q_main
</UL>

<P><STRONG><a name="[254]"></a>atomic_nand</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, atomic_c.o(.text), UNUSED)

<P><STRONG><a name="[255]"></a>k_call_stacks_analyze</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>_bss_zero</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _bss_zero
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrepC
</UL>

<P><STRONG><a name="[159]"></a>z_early_boot_rand32_get</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_rand32_get
</UL>

<P><STRONG><a name="[15b]"></a>_Cstart</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = _Cstart &rArr; prepare_multithreading &rArr; init_idle_thread &rArr; _setup_new_thread &rArr; _new_thread &rArr; _init_thread_base
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_main_thread
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_multithreading
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_device_do_config_level
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IntLibInit
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FaultInit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CpuIdleInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrepC
</UL>

<P><STRONG><a name="[18e]"></a>_update_time_slice_before_swap</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sched.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExcExit
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_thread_suspend
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Swap
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_thread_abort
</UL>

<P><STRONG><a name="[166]"></a>_priq_mq_best</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_peek_head
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_thread_time_slicing
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_up
</UL>

<P><STRONG><a name="[16a]"></a>_priq_mq_add</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _priq_mq_add
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_append
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_priority_set
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_thread_to_ready_q
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_move_thread_to_end_of_prio_q
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_yield
</UL>

<P><STRONG><a name="[16b]"></a>_priq_mq_remove</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _priq_mq_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_remove
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_priority_set
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_remove_thread_from_ready_q
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_move_thread_to_end_of_prio_q
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_yield
</UL>

<P><STRONG><a name="[16e]"></a>_impl_k_yield</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _impl_k_yield &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_priq_mq_remove
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_priq_mq_add
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_spin_unlock
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_idle
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Swap
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_spin_lock
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_sleep
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_q_main
</UL>

<P><STRONG><a name="[cb]"></a>_add_thread_to_ready_q</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _add_thread_to_ready_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_priq_mq_add
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mark_thread_as_queued
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_spin_unlock
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_spin_lock
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ready_thread
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_mutex_unlock
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mem_slab_free
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_stack_push
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ready_thread
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_multithreading
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sem_give
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_thread_to_run
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_one_expired_timeout
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ready_thread
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_one_expired_timeout
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ready_thread
</UL>

<P><STRONG><a name="[173]"></a>_priq_dumb_remove</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _priq_dumb_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unpend_thread_no_timeout
</UL>

<P><STRONG><a name="[132]"></a>_unpend_thread_no_timeout</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _unpend_thread_no_timeout &rArr; _priq_dumb_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_priq_dumb_remove
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_spin_unlock
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pended_on
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_spin_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unpend_first_thread
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unpend_thread
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sem_give_non_preemptible
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_one_expired_timeout
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_thread_single_abort
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_one_expired_timeout
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_one_expired_timeout
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_one_expired_timeout
</UL>

<P><STRONG><a name="[175]"></a>_priq_dumb_best</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _priq_dumb_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_peek_head
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_find_first_thread_to_unpend
</UL>

<P><STRONG><a name="[131]"></a>_find_first_thread_to_unpend</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _find_first_thread_to_unpend &rArr; _priq_dumb_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_priq_dumb_best
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_spin_unlock
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_spin_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unpend_first_thread
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sem_give_non_preemptible
</UL>

<P><STRONG><a name="[17c]"></a>_is_t1_higher_prio_than_t2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sched.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_priq_rb_lessthan
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_priq_dumb_add
</UL>

<P><STRONG><a name="[179]"></a>_move_thread_to_end_of_prio_q</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _move_thread_to_end_of_prio_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_priq_mq_remove
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_priq_mq_add
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mark_thread_as_queued
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_spin_unlock
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_spin_lock
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_time_slicing
</UL>

<P><STRONG><a name="[17a]"></a>_remove_thread_from_ready_q</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _remove_thread_from_ready_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_priq_mq_remove
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_spin_unlock
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_spin_lock
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_sleep
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_thread_single_abort
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_thread_single_suspend
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend
</UL>

<P><STRONG><a name="[17b]"></a>_priq_dumb_add</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _priq_dumb_add &rArr; sys_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_t1_higher_prio_than_t2
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_peek_head
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_insert_before
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_append
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_peek_next
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend
</UL>

<P><STRONG><a name="[da]"></a>_pend_thread</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sched.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox_message_put
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_pipe_put_internal
</UL>

<P><STRONG><a name="[d8]"></a>_pend_current_thread</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _pend_current_thread &rArr; pend &rArr; _add_thread_timeout &rArr; _add_timeout &rArr; _handle_one_expired_timeout &rArr; _ready_thread &rArr; _add_thread_to_ready_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Swap
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_mutex_lock
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mem_slab_alloc
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mem_pool_alloc
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_stack_pop
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbox_get
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox_message_put
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_sem_take
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_queue_get
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_pipe_get
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_pipe_put_internal
</UL>

<P><STRONG><a name="[e9]"></a>_unpend_first_thread</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _unpend_first_thread &rArr; _unpend_thread_no_timeout &rArr; _priq_dumb_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unpend_thread_no_timeout
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_find_first_thread_to_unpend
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_abort_thread_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_mutex_unlock
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mem_slab_free
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_stack_push
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sem_give
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_queue_append_list
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_queue_cancel_wait
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_insert
</UL>

<P><STRONG><a name="[d7]"></a>_unpend_thread</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _unpend_thread &rArr; _unpend_thread_no_timeout &rArr; _priq_dumb_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unpend_thread_no_timeout
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_abort_thread_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipe_xfer_prepare
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unpend_all
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbox_get
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox_message_put
</UL>

<P><STRONG><a name="[d3]"></a>_reschedule</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _reschedule &rArr; _Swap
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Swap
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_sched_unlock
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_priority_set
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mem_pool_free_id
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mem_slab_free
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_stack_push
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_sem_give
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox_message_put
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox_message_dispose
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_queue_append_list
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_queue_cancel_wait
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_insert
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_pipe_put_internal
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_thread_resume
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_thread_start
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_wakeup
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_thread_abort
</UL>

<P><STRONG><a name="[fc]"></a>_thread_priority_set</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, sched.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reschedule
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_priq_mq_remove
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_priq_mq_add
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_spin_unlock
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_spin_lock
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cache
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_thread_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_owner_prio
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_thread_priority_set
</UL>

<P><STRONG><a name="[180]"></a>k_sched_lock</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, sched.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_spin_unlock
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_spin_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_offload
</UL>

<P><STRONG><a name="[ff]"></a>k_sched_unlock</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = k_sched_unlock &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reschedule
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_spin_unlock
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_spin_lock
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_mutex_unlock
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_mutex_lock
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_pipe_get
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_pipe_put_internal
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_static_threads
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_offload
</UL>

<P><STRONG><a name="[181]"></a>_priq_rb_lessthan</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, sched.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_t1_higher_prio_than_t2
</UL>

<P><STRONG><a name="[182]"></a>_priq_rb_add</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sched.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_insert
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rb_foreach_next
</UL>

<P><STRONG><a name="[185]"></a>_priq_rb_remove</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sched.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_remove
</UL>

<P><STRONG><a name="[187]"></a>_priq_rb_best</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sched.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rb_get_minmax
</UL>

<P><STRONG><a name="[256]"></a>k_sched_time_slice_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sched.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>_is_thread_time_slicing</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _is_thread_time_slicing &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_priq_mq_best
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_spin_unlock
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_preempt
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_spin_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_time_slicing
</UL>

<P><STRONG><a name="[f2]"></a>_unpend_all</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _unpend_all &rArr; _ready_thread &rArr; _add_thread_to_ready_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unpend_thread
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ready_thread
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_peek_head
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mem_pool_free_id
</UL>

<P><STRONG><a name="[157]"></a>_sched_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sched_init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_multithreading
</UL>

<P><STRONG><a name="[11a]"></a>_impl_k_thread_priority_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sched.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_pipe_block_put
</UL>

<P><STRONG><a name="[18b]"></a>_impl_k_thread_priority_set</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sched.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_priority_set
</UL>

<P><STRONG><a name="[57]"></a>_impl_k_sleep</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _impl_k_sleep &rArr; _add_thread_timeout &rArr; _add_timeout &rArr; _handle_one_expired_timeout &rArr; _ready_thread &rArr; _add_thread_to_ready_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_remove_thread_from_ready_q
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_yield
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_thread_timeout
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Swap
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18c]"></a>_impl_k_wakeup</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, sched.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reschedule
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_abort_thread_timeout
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ready_thread
</UL>

<P><STRONG><a name="[208]"></a>_impl_k_current_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sched.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_entry
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NanoFatalErrorHandler
</UL>

<P><STRONG><a name="[18d]"></a>_impl_k_is_preempt_thread</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sched.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_preempt
</UL>

<P><STRONG><a name="[ec]"></a>_tick_get</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, sys_clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mem_pool_alloc
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_uptime_get
</UL>

<P><STRONG><a name="[257]"></a>sys_tick_get</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, sys_clock.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>_impl_k_uptime_get</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, sys_clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tick_get
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ticks_to_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_delta
</UL>

<P><STRONG><a name="[195]"></a>_tick_get_32</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_clock.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_uptime_get_32
</UL>

<P><STRONG><a name="[258]"></a>sys_tick_get_32</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, sys_clock.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>_impl_k_uptime_get_32</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sys_clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tick_get_32
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ticks_to_ms
</UL>

<P><STRONG><a name="[196]"></a>k_uptime_delta</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, sys_clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_uptime_get
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_delta_32
</UL>

<P><STRONG><a name="[197]"></a>k_uptime_delta_32</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_delta
</UL>

<P><STRONG><a name="[b7]"></a>_nano_sys_clock_tick_announce</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sys_clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _nano_sys_clock_tick_announce &rArr; handle_timeouts &rArr; _handle_expired_timeouts &rArr; _handle_one_expired_timeout &rArr; _add_thread_to_ready_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_time_slicing
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_timeouts
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_int_handler
</UL>

<P><STRONG><a name="[1a0]"></a>_impl_k_thread_start</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _impl_k_thread_start &rArr; _ready_thread &rArr; _add_thread_to_ready_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reschedule
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_has_thread_started
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mark_thread_as_started
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ready_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_new_thread
</UL>

<P><STRONG><a name="[259]"></a>k_thread_foreach</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, thread.o(.text), UNUSED)

<P><STRONG><a name="[219]"></a>k_is_in_isr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, thread.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFatalErrorHandler
</UL>

<P><STRONG><a name="[25a]"></a>_thread_essential_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, thread.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>_thread_essential_clear</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, thread.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_thread_user_mode_enter
</UL>

<P><STRONG><a name="[21a]"></a>_is_thread_essential</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, thread.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFatalErrorHandler
</UL>

<P><STRONG><a name="[151]"></a>k_busy_wait</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = k_busy_wait &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_cycle_get_32
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bg_thread_main
</UL>

<P><STRONG><a name="[154]"></a>_setup_new_thread</STRONG> (Thumb, 72 bytes, Stack size 72 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = _setup_new_thread &rArr; _new_thread &rArr; _init_thread_base
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_new_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_multithreading
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_idle_thread
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_thread_create
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_static_threads
</UL>

<P><STRONG><a name="[1ad]"></a>_impl_k_thread_create</STRONG> (Thumb, 58 bytes, Stack size 72 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _impl_k_thread_create &rArr; schedule_new_thread &rArr; _add_timeout &rArr; _handle_one_expired_timeout &rArr; _ready_thread &rArr; _add_thread_to_ready_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_new_thread
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setup_new_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_work_q_start
</UL>

<P><STRONG><a name="[1ae]"></a>_impl_k_thread_cancel</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_abort_thread_timeout
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_has_thread_started
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_thread_timeout_active
</UL>

<P><STRONG><a name="[1b0]"></a>_k_thread_single_suspend</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_thread_ready
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_remove_thread_from_ready_q
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_thread_suspend
</UL>

<P><STRONG><a name="[1b1]"></a>_impl_k_thread_suspend</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_thread_single_suspend
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__swap
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_time_slice_before_swap
</UL>

<P><STRONG><a name="[1b2]"></a>_k_thread_single_resume</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ready_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_thread_resume
</UL>

<P><STRONG><a name="[1b3]"></a>_impl_k_thread_resume</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reschedule
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_thread_single_resume
</UL>

<P><STRONG><a name="[1b4]"></a>_k_thread_single_abort</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _k_thread_single_abort &rArr; _remove_thread_from_ready_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unpend_thread_no_timeout
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_abort_thread_timeout
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_thread_timeout_active
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_thread_ready
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_remove_thread_from_ready_q
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_thread_abort
</UL>

<P><STRONG><a name="[152]"></a>_init_static_threads</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _init_static_threads &rArr; schedule_new_thread &rArr; _add_timeout &rArr; _handle_one_expired_timeout &rArr; _ready_thread &rArr; _add_thread_to_ready_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_sched_unlock
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_new_thread
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setup_new_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bg_thread_main
</UL>

<P><STRONG><a name="[cc]"></a>_init_thread_base</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _init_thread_base
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mbox_module
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_new_thread
</UL>

<P><STRONG><a name="[25b]"></a>k_thread_access_grant</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, thread.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>k_thread_user_mode_enter</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_essential_clear
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_entry
</UL>

<P><STRONG><a name="[137]"></a>k_work_q_start</STRONG> (Thumb, 76 bytes, Stack size 72 bytes, work_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = k_work_q_start &rArr; _impl_k_thread_create &rArr; schedule_new_thread &rArr; _add_timeout &rArr; _handle_one_expired_timeout &rArr; _ready_thread &rArr; _add_thread_to_ready_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_queue_init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_sys_work_q_init
</UL>

<P><STRONG><a name="[25c]"></a>k_delayed_work_init</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, work_q.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>k_delayed_work_cancel</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, work_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_get
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_and
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_abort_timeout
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sflist_find_and_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit_to_queue
</UL>

<P><STRONG><a name="[1c2]"></a>k_delayed_work_submit_to_queue</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, work_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_cancel
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_timeout
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_work_submit_to_queue
</UL>

<P><STRONG><a name="[bc]"></a>__printk_hook_install</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, printk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_console_hook_install
</UL>

<P><STRONG><a name="[25d]"></a>__printk_get_hook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, printk.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>_vprintk</STRONG> (Thumb, 550 bytes, Stack size 56 bytes, printk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _vprintk &rArr; _printk_dec_ulong
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printk_dec_ulong
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printk_hex_ulong
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintk
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintk
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintk
</UL>

<P><STRONG><a name="[1c9]"></a>vprintk</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, printk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = vprintk &rArr; _vprintk &rArr; _printk_dec_ulong
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vprintk
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printk
</UL>

<P><STRONG><a name="[25e]"></a>_impl_k_str_out</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, printk.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>printk</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, printk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = printk &rArr; vprintk &rArr; _vprintk &rArr; _printk_dec_ulong
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintk
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bg_thread_main
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFatalErrorHandler
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NanoFatalErrorHandler
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReservedException
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HardFault
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DebugMonitor
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UsageFault
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BusFault
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MpuFault
</UL>

<P><STRONG><a name="[1ca]"></a>snprintk</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, printk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vprintk
</UL>

<P><STRONG><a name="[1cb]"></a>vsnprintk</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, printk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vprintk
</UL>

<P><STRONG><a name="[eb]"></a>_sys_mem_pool_base_init</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, mempool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _sys_mem_pool_base_init &rArr; set_free_bit &rArr; get_bit_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_free_bit
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_ptr
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_append
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mem_pool_init
</UL>

<P><STRONG><a name="[ed]"></a>_sys_mem_pool_block_alloc</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, mempool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _sys_mem_pool_block_alloc &rArr; block_break &rArr; set_free_bit &rArr; get_bit_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_break
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_alloc
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_num
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_empty
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mem_pool_alloc
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mem_pool_alloc
</UL>

<P><STRONG><a name="[f1]"></a>_sys_mem_pool_block_free</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, mempool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _sys_mem_pool_block_free &rArr; block_free &rArr;  block_free (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_free
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mem_pool_free_id
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mem_pool_free
</UL>

<P><STRONG><a name="[1df]"></a>sys_mem_pool_alloc</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, mempool.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_mem_pool_block_alloc
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mutex_unlock
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mutex_lock
</UL>

<P><STRONG><a name="[1e2]"></a>sys_mem_pool_free</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mempool.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_mem_pool_block_free
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mutex_unlock
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mutex_lock
</UL>

<P><STRONG><a name="[1e4]"></a>_impl__ugelis_fputc</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stdout_console.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1e6]"></a>_impl__ugelis_fwrite</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, stdout_console.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>

<P><STRONG><a name="[bb]"></a>__stdout_hook_install</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stdout_console.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_console_hook_install
</UL>

<P><STRONG><a name="[1e3]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, stdout_console.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl__ugelis_fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>

<P><STRONG><a name="[1e5]"></a>fwrite</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, stdout_console.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl__ugelis_fwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>

<P><STRONG><a name="[1e7]"></a>fputs</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, stdout_console.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>

<P><STRONG><a name="[1e9]"></a>puts</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stdout_console.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1ec]"></a>fp_register_touch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, swap_helper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrepC
</UL>

<P><STRONG><a name="[9]"></a>__pendsv</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, swap_helper.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vector_table.o(.exc_vector_table._vector_table_section)
</UL>
<P><STRONG><a name="[7]"></a>__svc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, swap_helper.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_table.o(.exc_vector_table._vector_table_section)
</UL>
<P><STRONG><a name="[b]"></a>_isr_wrapper</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, isr_wrapper.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isr_tables.o(.irq_vector_table)
</UL>
<P><STRONG><a name="[b4]"></a>_arch_irq_enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, irq_manage.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gm_irq_config
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_k_init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_j_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_i_init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_h_init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_g_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_f_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_e_init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_d_init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_c_init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_b_init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_a_init
</UL>

<P><STRONG><a name="[25f]"></a>_arch_irq_disable</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, irq_manage.o(.text), UNUSED)

<P><STRONG><a name="[260]"></a>_arch_irq_is_enabled</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, irq_manage.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>_irq_priority_set</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, irq_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _irq_priority_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gm_irq_config
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_k_init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_j_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_i_init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_h_init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_g_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_f_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_e_init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_d_init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_c_init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_b_init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_a_init
</UL>

<P><STRONG><a name="[39]"></a>_irq_spurious</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, irq_manage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = _irq_spurious
</UL>
<BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__reserved
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isr_tables.o(.data)
</UL>
<P><STRONG><a name="[1eb]"></a>_PrepC</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, prep_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = _PrepC &rArr; _Cstart &rArr; prepare_multithreading &rArr; init_idle_thread &rArr; _setup_new_thread &rArr; _new_thread &rArr; _init_thread_base
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_register_touch
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Cstart
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bss_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__reset
</UL>

<P><STRONG><a name="[1]"></a>__nmi</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nmi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __nmi
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExcExit
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysNmiOnReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_table.o(.exc_vector_table._vector_table_section)
</UL>
<P><STRONG><a name="[b2]"></a>_sw_isr_table_set</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_tables.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sw_isr_table_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gm_irq_config
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_k_init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_j_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_i_init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_h_init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_g_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_f_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_e_init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_d_init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_c_init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_b_init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_a_init
</UL>

<P><STRONG><a name="[1ee]"></a>HAL_ICACHE_Enable</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, gm_hal_cache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ICACHE_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EnableIrq
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DisableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__reset
</UL>

<P><STRONG><a name="[1f1]"></a>HAL_ICACHE_Disable</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, gm_hal_cache.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EnableIrq
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DisableIrq
</UL>

<P><STRONG><a name="[220]"></a>HAL_ICACHE_Invalid</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gm_hal_cache.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__reset
</UL>

<P><STRONG><a name="[261]"></a>HAL_ICACHE_Flush</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gm_hal_cache.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>HAL_DCACHE_Enable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gm_hal_cache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DCACHE_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EnableIrq
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DisableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__reset
</UL>

<P><STRONG><a name="[1f3]"></a>HAL_DCACHE_Disable</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, gm_hal_cache.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EnableIrq
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DisableIrq
</UL>

<P><STRONG><a name="[1f4]"></a>HAL_DCACHE_InvalidAll</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gm_hal_cache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DCACHE_InvalidAll
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EnableIrq
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DisableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__reset
</UL>

<P><STRONG><a name="[1f5]"></a>HAL_DCACHE_InvalidLine</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gm_hal_cache.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EnableIrq
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DisableIrq
</UL>

<P><STRONG><a name="[262]"></a>HAL_DCACHE_Flush</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gm_hal_cache.o(.text), UNUSED)

<P><STRONG><a name="[263]"></a>_sys_power_save_idle_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, idle.o(.text), UNUSED)

<P><STRONG><a name="[12]"></a>idle</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, idle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = idle &rArr; sys_power_save_idle
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_power_save_idle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init.o(.text)
</UL>
<P><STRONG><a name="[188]"></a>_rb_get_minmax</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_child
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_priq_rb_best
</UL>

<P><STRONG><a name="[184]"></a>rb_insert</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, rb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_extra_red
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_and_stack
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_color
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_child
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_priq_rb_add
</UL>

<P><STRONG><a name="[186]"></a>rb_remove</STRONG> (Thumb, 564 bytes, Stack size 64 bytes, rb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_missing_black
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_side
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_and_stack
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_color
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_red
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_black
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_color
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_child
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_child
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_priq_rb_remove
</UL>

<P><STRONG><a name="[203]"></a>_rb_walk</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, rb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rb_walk
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_child
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rb_walk
</UL>

<P><STRONG><a name="[204]"></a>_rb_child</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, rb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_child
</UL>

<P><STRONG><a name="[205]"></a>_rb_is_black</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_black
</UL>

<P><STRONG><a name="[206]"></a>rb_contains</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, rb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_child
</UL>

<P><STRONG><a name="[183]"></a>_rb_foreach_next</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, rb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_left_limb
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_child
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_priq_rb_add
</UL>

<P><STRONG><a name="[1a]"></a>_thread_entry</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, thread_entry.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _thread_entry &rArr; _impl_k_thread_abort &rArr; _k_thread_single_abort &rArr; _remove_thread_from_ready_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_current_get
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_thread_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_main_thread
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_thread_user_mode_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_1.o(.text)
</UL>
<P><STRONG><a name="[1ac]"></a>_new_thread</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, thread_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _new_thread &rArr; _init_thread_base
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_thread_base
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setup_new_thread
</UL>

<P><STRONG><a name="[18f]"></a>__swap</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, swap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_thread_suspend
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Swap
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_thread_abort
</UL>

<P><STRONG><a name="[18]"></a>_irq_do_offload</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, irq_offload.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _irq_do_offload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> swap_helper.o(.text)
</UL>
<P><STRONG><a name="[20a]"></a>irq_offload</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, irq_offload.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_sched_unlock
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_sched_lock
</UL>

<P><STRONG><a name="[15c]"></a>_IntLibInit</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, irq_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _IntLibInit
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Cstart
</UL>

<P><STRONG><a name="[214]"></a>_Fault</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, fault.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = _Fault &rArr; _FaultHandle &rArr; _HardFault &rArr; _MpuFault &rArr; printk &rArr; vprintk &rArr; _vprintk &rArr; _printk_dec_ulong
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NanoFatalErrorHandler
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FaultHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bus_fault
</UL>

<P><STRONG><a name="[15e]"></a>_FaultInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fault.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Cstart
</UL>

<P><STRONG><a name="[215]"></a>_NanoFatalErrorHandler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fatal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = _NanoFatalErrorHandler &rArr; _SysFatalErrorHandler &rArr; printk &rArr; vprintk &rArr; _vprintk &rArr; _printk_dec_ulong
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printk
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_current_get
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFatalErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Fault
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_kernel_oops
</UL>

<P><STRONG><a name="[19]"></a>_do_kernel_oops</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fatal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = _do_kernel_oops &rArr; _NanoFatalErrorHandler &rArr; _SysFatalErrorHandler &rArr; printk &rArr; vprintk &rArr; _vprintk &rArr; _printk_dec_ulong
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NanoFatalErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arch_syscall_oops
</UL>
<BR>[Address Reference Count : 1]<UL><LI> swap_helper.o(.text)
</UL>
<P><STRONG><a name="[217]"></a>_arch_syscall_oops</STRONG> (Thumb, 24 bytes, Stack size 104 bytes, fatal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_kernel_oops
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[15f]"></a>_CpuIdleInit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_idle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Cstart
</UL>

<P><STRONG><a name="[1f7]"></a>k_cpu_idle</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_idle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFatalErrorHandler
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_power_save_idle
</UL>

<P><STRONG><a name="[264]"></a>k_cpu_atomic_idle</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_idle.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>_SysNmiOnReset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, nmi_on_reset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysNmiOnReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__nmi
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysNmiOnReset
</UL>

<P><STRONG><a name="[15a]"></a>sys_rand32_get</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rand32_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_cycle_get_32
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_add
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;z_early_boot_rand32_get
</UL>

<P><STRONG><a name="[209]"></a>_impl_k_thread_abort</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, thread_abort_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _impl_k_thread_abort &rArr; _k_thread_single_abort &rArr; _remove_thread_from_ready_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reschedule
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_thread_single_abort
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__swap
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_time_slice_before_swap
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_entry
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysFatalErrorHandler
</UL>

<P><STRONG><a name="[216]"></a>_SysFatalErrorHandler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, sys_fatal_error_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = _SysFatalErrorHandler &rArr; printk &rArr; vprintk &rArr; _vprintk &rArr; _printk_dec_ulong
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printk
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_thread_essential
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_is_in_isr
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_thread_abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_cpu_idle
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NanoFatalErrorHandler
</UL>

<P><STRONG><a name="[1a9]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_busy_wait
</UL>

<P><STRONG><a name="[df]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbox_data_get
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c2_pinmux_config
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c0_pinmux_config
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_pinmux_config
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_pinmux_config
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_pinmux_config
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_pinmux_config
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbox_async_put
</UL>

<P><STRONG><a name="[265]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[21d]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[266]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[267]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_calloc
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bss_zero
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arch_syscall_oops
</UL>

<P><STRONG><a name="[268]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[21e]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1e8]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>

<P><STRONG><a name="[138]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_get_binding
</UL>

<P><STRONG><a name="[21c]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[269]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[26a]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[26b]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>_ExcExit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, exc_exit.o(.text._HandlerModeExit))
<BR><BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_time_slice_before_swap
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_int_handler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__nmi
</UL>

<P><STRONG><a name="[1ea]"></a>_IntExit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, exc_exit.o(.text._HandlerModeExit))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isr_wrapper
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__svc
</UL>

<P><STRONG><a name="[4]"></a>__bus_fault</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fault_s.o(.text.__fault))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = __bus_fault &rArr; _Fault &rArr; _FaultHandle &rArr; _HardFault &rArr; _MpuFault &rArr; printk &rArr; vprintk &rArr; _vprintk &rArr; _printk_dec_ulong
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Fault
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_table.o(.exc_vector_table._vector_table_section)
</UL>
<P><STRONG><a name="[8]"></a>__debug_monitor</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fault_s.o(.text.__fault))
<BR>[Address Reference Count : 1]<UL><LI> vector_table.o(.exc_vector_table._vector_table_section)
</UL>
<P><STRONG><a name="[2]"></a>__hard_fault</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fault_s.o(.text.__fault))
<BR>[Address Reference Count : 1]<UL><LI> vector_table.o(.exc_vector_table._vector_table_section)
</UL>
<P><STRONG><a name="[3]"></a>__mpu_fault</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fault_s.o(.text.__fault))
<BR>[Address Reference Count : 1]<UL><LI> vector_table.o(.exc_vector_table._vector_table_section)
</UL>
<P><STRONG><a name="[6]"></a>__reserved</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fault_s.o(.text.__fault))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_irq_spurious
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_table.o(.exc_vector_table._vector_table_section)
</UL>
<P><STRONG><a name="[5]"></a>__usage_fault</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fault_s.o(.text.__fault))
<BR>[Address Reference Count : 1]<UL><LI> vector_table.o(.exc_vector_table._vector_table_section)
</UL>
<P><STRONG><a name="[0]"></a>__reset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, reset.o(.text._reset_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = __reset &rArr; _PrepC &rArr; _Cstart &rArr; prepare_multithreading &rArr; init_idle_thread &rArr; _setup_new_thread &rArr; _new_thread &rArr; _init_thread_base
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrepC
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ICACHE_Invalid
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ICACHE_Enable
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCACHE_InvalidAll
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCACHE_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_table.o(.exc_vector_table._vector_table_section)
</UL>
<P><STRONG><a name="[26c]"></a>__start</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, reset.o(.text._reset_section), UNUSED)

<P><STRONG><a name="[26d]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[26e]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[26f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1de]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_mem_pool_block_free
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_mem_pool_block_alloc
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_remove
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_insert
</UL>

<P><STRONG><a name="[1dd]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_mem_pool_block_free
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_mem_pool_block_alloc
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_remove
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_insert
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[3a]"></a>gm6721x_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, soc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = gm6721x_init &rArr; SystemInit &rArr; sysClkInit &rArr; HAL_CLOCK_SYSCLKConfig &rArr; HAL_CLOCK_AdjustPLLKDPDefaultDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soc.o(.devconfig.init)
</UL>
<P><STRONG><a name="[59]"></a>sysClkInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, soc_gm6721x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = sysClkInit &rArr; HAL_CLOCK_SYSCLKConfig &rArr; HAL_CLOCK_AdjustPLLKDPDefaultDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_SYSCLKConfig
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_PLLsReferenceClock
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[5c]"></a>uart0_pinmux_config</STRONG> (Thumb, 116 bytes, Stack size 64 bytes, pinmux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = uart0_pinmux_config &rArr; device_get_binding &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_get_binding
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_pin_set
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_gm_initialize
</UL>

<P><STRONG><a name="[60]"></a>uart1_pinmux_config</STRONG> (Thumb, 116 bytes, Stack size 64 bytes, pinmux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = uart1_pinmux_config &rArr; device_get_binding &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_get_binding
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_pin_set
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_gm_initialize
</UL>

<P><STRONG><a name="[61]"></a>uart2_pinmux_config</STRONG> (Thumb, 116 bytes, Stack size 64 bytes, pinmux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = uart2_pinmux_config &rArr; device_get_binding &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_get_binding
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_pin_set
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_gm_initialize
</UL>

<P><STRONG><a name="[62]"></a>uart3_pinmux_config</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, pinmux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = uart3_pinmux_config &rArr; device_get_binding &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_get_binding
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_pin_set
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_gm_initialize
</UL>

<P><STRONG><a name="[63]"></a>i2c0_pinmux_config</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, pinmux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = i2c0_pinmux_config &rArr; device_get_binding &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_get_binding
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_pin_set
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_gm_initialize
</UL>

<P><STRONG><a name="[64]"></a>i2c2_pinmux_config</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, pinmux.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_get_binding
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_pin_set
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[3c]"></a>pinmux_gm_initialize</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, pinmux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pinmux_gm_initialize &rArr; uart2_pinmux_config &rArr; device_get_binding &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_get_binding
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c0_pinmux_config
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_pinmux_config
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_pinmux_config
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_pinmux_config
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_pinmux_config
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gm_pinmux_pm_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pinmux.o(.devconfig.init)
</UL>
<P><STRONG><a name="[3d]"></a>gm_pinmux_pm_control</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, pinmux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = gm_pinmux_pm_control &rArr; pinmux_gm_initialize &rArr; uart2_pinmux_config &rArr; device_get_binding &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_gm_initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pinmux.o(.devconfig.init)
</UL>
<P><STRONG><a name="[5f]"></a>pinmux_pin_set</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, pinmux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pinmux_pin_set
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c2_pinmux_config
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c0_pinmux_config
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_pinmux_config
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_pinmux_config
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_pinmux_config
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_pinmux_config
</UL>

<P><STRONG><a name="[6b]"></a>DMA_CommonIRQHandler</STRONG> (Thumb, 554 bytes, Stack size 24 bytes, gm_hal_dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>

<P><STRONG><a name="[6f]"></a>HAL_DMA_HostIrqConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gm_hal_dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[70]"></a>DMA_InitHandle</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, gm_hal_dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[7f]"></a>transmit_data</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, gm_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_PutChar
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Is_LS_TXHE
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxInterruptHandler
</UL>

<P><STRONG><a name="[e]"></a>UART_TxDMACallback</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, gm_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_TxDMACallback &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gm_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[d]"></a>UART_RxDMACallback</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, gm_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_RxDMACallback &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gm_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[82]"></a>UART_DMAConfig</STRONG> (Thumb, 540 bytes, Stack size 40 bytes, gm_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Request_Channel
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[86]"></a>receive_data</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, gm_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_GetChar
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Is_LS_RXDA
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxInterruptHandler
</UL>

<P><STRONG><a name="[8b]"></a>UART_TxInterruptHandler</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, gm_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_data
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[8c]"></a>UART_RxInterruptHandler</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, gm_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_data
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[93]"></a>LL_UART_Is_IE_TXHE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gm_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxInt_Enabled
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[94]"></a>LL_UART_Is_IS_TXHE</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gm_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxInt_Ready
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[95]"></a>LL_UART_Clear_IS_TXHE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gm_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Clear_TxInt
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[80]"></a>LL_UART_Is_LS_TXHE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gm_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_PutChar
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_data
</UL>

<P><STRONG><a name="[77]"></a>LL_UART_Is_LS_TXE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gm_hal_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_GetTransferStatus
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TransferConfig
</UL>

<P><STRONG><a name="[92]"></a>LL_UART_Is_IS_RXDA</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gm_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxInt_Ready
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[87]"></a>LL_UART_Is_LS_RXDA</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gm_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DataReady
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_data
</UL>

<P><STRONG><a name="[7c]"></a>LL_UART_Enable_RxErr_Interrupts</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gm_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Enable_Error_Interrupts
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_EnableInterrupts
</UL>

<P><STRONG><a name="[7e]"></a>LL_UART_Disable_RxErr_Interrupts</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gm_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Disable_Error_Interrupts
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DisableInterrupts
</UL>

<P><STRONG><a name="[8e]"></a>LL_UART_Is_IE_OPFB</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gm_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Error_Enabled
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[90]"></a>LL_UART_Clear_IS_OPFB</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gm_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Clear_ErrInt
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[8f]"></a>LL_UART_Is_IS_OPFB</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gm_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Error_Ready
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[89]"></a>LL_UART_Is_LS_RXES</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gm_hal_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>

<P><STRONG><a name="[79]"></a>LL_UART_Clear_IS_TFT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gm_hal_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Clear_TxFifoInt
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TransferConfig
</UL>

<P><STRONG><a name="[97]"></a>LL_UART_Is_IS_TFT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gm_hal_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxFifoInt_Ready
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[7a]"></a>LL_UART_Clear_IS_RFT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gm_hal_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Clear_RxFifoInt
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TransferConfig
</UL>

<P><STRONG><a name="[96]"></a>LL_UART_Is_IS_RFT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gm_hal_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxFifoInt_Ready
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[91]"></a>LL_UART_Is_IS_RFTO</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gm_hal_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxFifoTmo_Ready
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[78]"></a>LL_UART_GetChar</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gm_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_GetChar
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TransferConfig
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_data
</UL>

<P><STRONG><a name="[81]"></a>LL_UART_PutChar</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gm_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_PutChar
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_data
</UL>

<P><STRONG><a name="[ae]"></a>HAL_GPIO_GetInstance</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gm_hal_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_SetPinFilter
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>

<P><STRONG><a name="[3f]"></a>gm_uart_pm_control</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, uart_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gm_uart_pm_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_gm.o(.devconfig.init)
</UL>
<P><STRONG><a name="[3e]"></a>uart_gm_init</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, uart_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = uart_gm_init &rArr; HAL_UART_Init &rArr; HAL_Reset_Module &rArr; HAL_TryLock
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_gm.o(.devconfig.init)
</UL>
<P><STRONG><a name="[1c]"></a>uart_gm_poll_in</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, uart_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_gm_poll_in &rArr; HAL_UART_GetChar
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_GetChar
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DataReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_gm.o(.constdata)
</UL>
<P><STRONG><a name="[1d]"></a>uart_gm_poll_out</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, uart_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart_gm_poll_out &rArr; HAL_UART_PutChar
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_PutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_gm.o(.constdata)
</UL>
<P><STRONG><a name="[1e]"></a>uart_gm_err_check</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, uart_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_gm_err_check &rArr; HAL_UART_Error_Ready
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Error_Ready
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Error_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_gm.o(.constdata)
</UL>
<P><STRONG><a name="[f]"></a>uart_gm_isr</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, uart_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart_gm_isr &rArr; HAL_UART_Clear_ErrInt
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Clear_ErrInt
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Error_Ready
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Clear_TxInt
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxInt_Ready
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_gm.o(.text)
</UL>
<P><STRONG><a name="[1b]"></a>uart_gm_irq_config</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, uart_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uart_gm_irq_config &rArr; _irq_priority_set
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sw_isr_table_set
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_irq_priority_set
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arch_irq_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_gm.o(.constdata)
</UL>
<P><STRONG><a name="[1f]"></a>uart_gm_fifo_fill</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, uart_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uart_gm_fifo_fill &rArr; HAL_UART_PutChar
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_PutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_gm.o(.constdata)
</UL>
<P><STRONG><a name="[20]"></a>uart_gm_fifo_read</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, uart_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart_gm_fifo_read &rArr; HAL_UART_GetChar
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_GetChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_gm.o(.constdata)
</UL>
<P><STRONG><a name="[21]"></a>uart_gm_irq_tx_enable</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uart_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart_gm_irq_tx_enable &rArr; HAL_UART_EnableInterrupts
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_EnableInterrupts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_gm.o(.constdata)
</UL>
<P><STRONG><a name="[22]"></a>uart_gm_irq_tx_disable</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uart_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart_gm_irq_tx_disable &rArr; HAL_UART_DisableInterrupts
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DisableInterrupts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_gm.o(.constdata)
</UL>
<P><STRONG><a name="[23]"></a>uart_gm_irq_tx_ready</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, uart_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_gm_irq_tx_ready &rArr; HAL_UART_TxInt_Ready
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxInt_Ready
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_gm.o(.constdata)
</UL>
<P><STRONG><a name="[24]"></a>uart_gm_irq_rx_enable</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uart_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart_gm_irq_rx_enable &rArr; HAL_UART_EnableInterrupts
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_EnableInterrupts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_gm.o(.constdata)
</UL>
<P><STRONG><a name="[25]"></a>uart_gm_irq_rx_disable</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uart_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart_gm_irq_rx_disable &rArr; HAL_UART_DisableInterrupts
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DisableInterrupts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_gm.o(.constdata)
</UL>
<P><STRONG><a name="[26]"></a>uart_gm_irq_tx_complete</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, uart_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_gm_irq_tx_complete
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Tx_Complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_gm.o(.constdata)
</UL>
<P><STRONG><a name="[27]"></a>uart_gm_irq_rx_ready</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, uart_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_gm_irq_rx_ready &rArr; HAL_UART_RxInt_Ready
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxInt_Ready
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_gm.o(.constdata)
</UL>
<P><STRONG><a name="[28]"></a>uart_gm_irq_err_enable</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, uart_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_gm_irq_err_enable &rArr; HAL_UART_Enable_Error_Interrupts
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Enable_Error_Interrupts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_gm.o(.constdata)
</UL>
<P><STRONG><a name="[29]"></a>uart_gm_irq_err_disable</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, uart_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_gm_irq_err_disable &rArr; HAL_UART_Disable_Error_Interrupts
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Disable_Error_Interrupts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_gm.o(.constdata)
</UL>
<P><STRONG><a name="[2a]"></a>uart_gm_irq_is_pending</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, uart_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_gm_irq_is_pending &rArr; HAL_UART_RxInt_Ready
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxInt_Ready
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxInt_Enabled
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxInt_Ready
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxInt_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_gm.o(.constdata)
</UL>
<P><STRONG><a name="[2b]"></a>uart_gm_irq_update</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_gm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> uart_gm.o(.constdata)
</UL>
<P><STRONG><a name="[2c]"></a>uart_gm_irq_callback_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_gm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> uart_gm.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>uart_poll_out</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uart_console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_poll_out
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_out
</UL>

<P><STRONG><a name="[10]"></a>console_out</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uart_console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = console_out &rArr; uart_poll_out
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_poll_out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_console.o(.text)
</UL>
<P><STRONG><a name="[40]"></a>uart_console_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart_console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart_console_init &rArr; device_get_binding &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_get_binding
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_console_hook_install
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_console.o(.devconfig.init)
</UL>
<P><STRONG><a name="[c7]"></a>sys_slist_peek_next</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gpio_gm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_fire_callbacks
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_manage_callback
</UL>

<P><STRONG><a name="[bd]"></a>gpio_clk_rst_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gpio_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gpio_clk_rst_init &rArr; HAL_GPIO_SW_Reset &rArr; HAL_Reset_Module &rArr; HAL_TryLock
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_CLK_ENABLE
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_SW_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_k_init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_j_init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_h_init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_g_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_f_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_e_init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_d_init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_c_init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_b_init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_a_init
</UL>

<P><STRONG><a name="[bf]"></a>gpio_irq_enable</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gpio_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_enable_callback
</UL>

<P><STRONG><a name="[c0]"></a>gpio_irq_disable</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gpio_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_disable_callback
</UL>

<P><STRONG><a name="[30]"></a>gpio_gm_manage_callback</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, gpio_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gpio_gm_manage_callback &rArr; _gpio_manage_callback &rArr; sys_slist_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_manage_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_gm.o(.constdata)
</UL>
<P><STRONG><a name="[31]"></a>gpio_gm_enable_callback</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, gpio_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = gpio_gm_enable_callback &rArr; gpio_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_gm.o(.constdata)
</UL>
<P><STRONG><a name="[32]"></a>gpio_gm_disable_callback</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, gpio_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = gpio_gm_disable_callback &rArr; gpio_irq_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_gm.o(.constdata)
</UL>
<P><STRONG><a name="[11]"></a>gpio_gm_port_isr</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, gpio_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gpio_gm_port_isr &rArr; _gpio_fire_callbacks
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_fire_callbacks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_gm.o(.text)
</UL>
<P><STRONG><a name="[41]"></a>gpio_gm_a_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gpio_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gpio_gm_a_init &rArr; gpio_clk_rst_init &rArr; HAL_GPIO_SW_Reset &rArr; HAL_Reset_Module &rArr; HAL_TryLock
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_clk_rst_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sw_isr_table_set
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_irq_priority_set
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arch_irq_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_gm.o(.devconfig.init)
</UL>
<P><STRONG><a name="[42]"></a>gpio_gm_b_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gpio_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gpio_gm_b_init &rArr; gpio_clk_rst_init &rArr; HAL_GPIO_SW_Reset &rArr; HAL_Reset_Module &rArr; HAL_TryLock
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_clk_rst_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sw_isr_table_set
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_irq_priority_set
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arch_irq_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_gm.o(.devconfig.init)
</UL>
<P><STRONG><a name="[43]"></a>gpio_gm_c_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gpio_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gpio_gm_c_init &rArr; gpio_clk_rst_init &rArr; HAL_GPIO_SW_Reset &rArr; HAL_Reset_Module &rArr; HAL_TryLock
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_clk_rst_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sw_isr_table_set
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_irq_priority_set
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arch_irq_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_gm.o(.devconfig.init)
</UL>
<P><STRONG><a name="[44]"></a>gpio_gm_d_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gpio_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gpio_gm_d_init &rArr; gpio_clk_rst_init &rArr; HAL_GPIO_SW_Reset &rArr; HAL_Reset_Module &rArr; HAL_TryLock
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_clk_rst_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sw_isr_table_set
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_irq_priority_set
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arch_irq_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_gm.o(.devconfig.init)
</UL>
<P><STRONG><a name="[45]"></a>gpio_gm_e_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gpio_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gpio_gm_e_init &rArr; gpio_clk_rst_init &rArr; HAL_GPIO_SW_Reset &rArr; HAL_Reset_Module &rArr; HAL_TryLock
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_clk_rst_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sw_isr_table_set
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_irq_priority_set
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arch_irq_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_gm.o(.devconfig.init)
</UL>
<P><STRONG><a name="[46]"></a>gpio_gm_f_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gpio_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gpio_gm_f_init &rArr; gpio_clk_rst_init &rArr; HAL_GPIO_SW_Reset &rArr; HAL_Reset_Module &rArr; HAL_TryLock
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_clk_rst_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sw_isr_table_set
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_irq_priority_set
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arch_irq_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_gm.o(.devconfig.init)
</UL>
<P><STRONG><a name="[47]"></a>gpio_gm_g_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gpio_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gpio_gm_g_init &rArr; gpio_clk_rst_init &rArr; HAL_GPIO_SW_Reset &rArr; HAL_Reset_Module &rArr; HAL_TryLock
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_clk_rst_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sw_isr_table_set
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_irq_priority_set
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arch_irq_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_gm.o(.devconfig.init)
</UL>
<P><STRONG><a name="[48]"></a>gpio_gm_h_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gpio_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gpio_gm_h_init &rArr; gpio_clk_rst_init &rArr; HAL_GPIO_SW_Reset &rArr; HAL_Reset_Module &rArr; HAL_TryLock
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_clk_rst_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sw_isr_table_set
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_irq_priority_set
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arch_irq_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_gm.o(.devconfig.init)
</UL>
<P><STRONG><a name="[49]"></a>gpio_gm_i_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gpio_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = gpio_gm_i_init &rArr; _irq_priority_set
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sw_isr_table_set
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_irq_priority_set
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arch_irq_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_gm.o(.devconfig.init)
</UL>
<P><STRONG><a name="[4a]"></a>gpio_gm_j_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gpio_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gpio_gm_j_init &rArr; gpio_clk_rst_init &rArr; HAL_GPIO_SW_Reset &rArr; HAL_Reset_Module &rArr; HAL_TryLock
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_clk_rst_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sw_isr_table_set
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_irq_priority_set
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arch_irq_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_gm.o(.devconfig.init)
</UL>
<P><STRONG><a name="[4b]"></a>gpio_gm_k_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gpio_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gpio_gm_k_init &rArr; gpio_clk_rst_init &rArr; HAL_GPIO_SW_Reset &rArr; HAL_Reset_Module &rArr; HAL_TryLock
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_clk_rst_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sw_isr_table_set
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_irq_priority_set
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arch_irq_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_gm.o(.devconfig.init)
</UL>
<P><STRONG><a name="[be]"></a>_gpio_manage_callback</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, gpio_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _gpio_manage_callback &rArr; sys_slist_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_slist_remove
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_slist_peek_head
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;z_slist_tail_set
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;z_slist_head_set
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;z_snode_next_set
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_slist_peek_next
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_manage_callback
</UL>

<P><STRONG><a name="[c1]"></a>_gpio_fire_callbacks</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, gpio_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gpio_fire_callbacks
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_slist_peek_head
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_slist_peek_next
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gm_port_isr
</UL>

<P><STRONG><a name="[2d]"></a>gpio_gm_config</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, gpio_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gpio_gm_config &rArr; HAL_GPIO_Init &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_gm.o(.constdata)
</UL>
<P><STRONG><a name="[2e]"></a>gpio_gm_write</STRONG> (Thumb, 568 bytes, Stack size 56 bytes, gpio_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gpio_gm_write
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_PinWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_gm.o(.constdata)
</UL>
<P><STRONG><a name="[2f]"></a>gpio_gm_read</STRONG> (Thumb, 350 bytes, Stack size 64 bytes, gpio_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gpio_gm_read
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_PinRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_gm.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>z_snode_next_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio_gm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_slist_remove
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_manage_callback
</UL>

<P><STRONG><a name="[c4]"></a>z_slist_head_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio_gm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_slist_remove
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_manage_callback
</UL>

<P><STRONG><a name="[c5]"></a>z_slist_tail_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio_gm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_slist_remove
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_manage_callback
</UL>

<P><STRONG><a name="[c2]"></a>sys_slist_peek_head</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio_gm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_slist_remove
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_fire_callbacks
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_manage_callback
</UL>

<P><STRONG><a name="[c6]"></a>sys_slist_remove</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, gpio_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sys_slist_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_slist_peek_head
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;z_slist_tail_set
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;z_slist_head_set
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;z_snode_next_set
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_manage_callback
</UL>

<P><STRONG><a name="[33]"></a>pinmux_gm_set</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, pinmux_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pinmux_gm_set &rArr; HAL_GPIO_Init &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pinmux_gm.o(.constdata)
</UL>
<P><STRONG><a name="[34]"></a>pinmux_gm_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pinmux_gm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pinmux_gm_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pinmux_gm.o(.constdata)
</UL>
<P><STRONG><a name="[35]"></a>pinmux_gm_pullup</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pinmux_gm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pinmux_gm.o(.constdata)
</UL>
<P><STRONG><a name="[36]"></a>pinmux_gm_input</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pinmux_gm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pinmux_gm.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>pinmux_gm_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pinmux_gm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pinmux_gm.o(.devconfig.init)
</UL>
<P><STRONG><a name="[d5]"></a>sys_dlist_peek_head</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mailbox.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbox_get
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox_message_put
</UL>

<P><STRONG><a name="[d9]"></a>sys_dlist_peek_next</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mailbox.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbox_get
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox_message_put
</UL>

<P><STRONG><a name="[ca]"></a>_ready_thread</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mailbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_thread_to_ready_q
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox_message_put
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox_message_dispose
</UL>

<P><STRONG><a name="[4e]"></a>init_mbox_module</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, mailbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = init_mbox_module &rArr; k_stack_push &rArr; _impl_k_stack_push &rArr; _unpend_first_thread &rArr; _unpend_thread_no_timeout &rArr; _priq_dumb_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_thread_base
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_stack_push
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mailbox.o(.devconfig.init)
</UL>
<P><STRONG><a name="[d6]"></a>mbox_message_match</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, mailbox.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbox_get
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox_message_put
</UL>

<P><STRONG><a name="[d0]"></a>mbox_message_dispose</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, mailbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mem_pool_free
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reschedule
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_sem_give
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_stack_push
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ready_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbox_data_block_get
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbox_data_get
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox_message_data_check
</UL>

<P><STRONG><a name="[d4]"></a>mbox_message_put</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, mailbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unpend_thread
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reschedule
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pend_thread
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pend_current_thread
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox_message_match
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ready_thread
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_peek_next
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_peek_head
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbox_async_put
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbox_put
</UL>

<P><STRONG><a name="[e2]"></a>mbox_message_data_check</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mailbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbox_data_get
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox_message_dispose
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbox_get
</UL>

<P><STRONG><a name="[cd]"></a>k_stack_push</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mailbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = k_stack_push &rArr; _impl_k_stack_push &rArr; _unpend_first_thread &rArr; _unpend_thread_no_timeout &rArr; _priq_dumb_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_stack_push
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox_message_dispose
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mbox_module
</UL>

<P><STRONG><a name="[cf]"></a>_waitq_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mailbox.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbox_init
</UL>

<P><STRONG><a name="[e5]"></a>create_free_list</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mem_slab.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mem_slab_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mem_slab_module
</UL>

<P><STRONG><a name="[4f]"></a>init_mem_slab_module</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mem_slab.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_mem_slab_module
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_free_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mem_slab.o(.devconfig.init)
</UL>
<P><STRONG><a name="[f0]"></a>get_pool</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mempool.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mem_pool_free_id
</UL>

<P><STRONG><a name="[ee]"></a>pool_id</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mempool.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mem_pool_alloc
</UL>

<P><STRONG><a name="[ea]"></a>k_mem_pool_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mempool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = k_mem_pool_init &rArr; _sys_mem_pool_base_init &rArr; set_free_bit &rArr; get_bit_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_mem_pool_base_init
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_static_pools
</UL>

<P><STRONG><a name="[fa]"></a>_is_prio_higher</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mutex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_mutex_lock
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_prio_for_inheritance
</UL>

<P><STRONG><a name="[fe]"></a>_sched_lock</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, mutex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_mutex_unlock
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_mutex_lock
</UL>

<P><STRONG><a name="[f9]"></a>new_prio_for_inheritance</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_prio_higher
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_mutex_lock
</UL>

<P><STRONG><a name="[fb]"></a>adjust_owner_prio</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_priority_set
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_mutex_unlock
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_mutex_lock
</UL>

<P><STRONG><a name="[111]"></a>sys_dlist_peek_next</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, pipes.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipe_xfer_prepare
</UL>

<P><STRONG><a name="[101]"></a>sys_dlist_get</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, pipes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_pipe_get
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_pipe_put_internal
</UL>

<P><STRONG><a name="[103]"></a>_ready_thread</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, pipes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_thread_to_ready_q
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipe_thread_ready
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_pipe_put_internal
</UL>

<P><STRONG><a name="[115]"></a>_sched_lock</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, pipes.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_pipe_get
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_pipe_put_internal
</UL>

<P><STRONG><a name="[104]"></a>pipe_async_alloc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, pipes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_stack_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_pipe_block_put
</UL>

<P><STRONG><a name="[105]"></a>pipe_async_free</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pipes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_stack_push
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipe_async_finish
</UL>

<P><STRONG><a name="[107]"></a>pipe_async_finish</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pipes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipe_async_free
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mem_pool_free
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_sem_give
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipe_thread_ready
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_pipe_put_internal
</UL>

<P><STRONG><a name="[51]"></a>init_pipes_module</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, pipes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = init_pipes_module &rArr; k_stack_push &rArr; _impl_k_stack_push &rArr; _unpend_first_thread &rArr; _unpend_thread_no_timeout &rArr; _priq_dumb_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_stack_push
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pipes.o(.devconfig.init)
</UL>
<P><STRONG><a name="[10d]"></a>pipe_xfer</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pipes.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipe_buffer_get
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipe_buffer_put
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_pipe_get
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_pipe_put_internal
</UL>

<P><STRONG><a name="[10c]"></a>pipe_buffer_put</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, pipes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipe_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_pipe_get
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_pipe_put_internal
</UL>

<P><STRONG><a name="[10e]"></a>pipe_buffer_get</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, pipes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipe_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_pipe_get
</UL>

<P><STRONG><a name="[10f]"></a>pipe_xfer_prepare</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, pipes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_peek_head
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_peek_next
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unpend_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_pipe_get
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_pipe_put_internal
</UL>

<P><STRONG><a name="[116]"></a>pipe_return_code</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pipes.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_pipe_get
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_pipe_put_internal
</UL>

<P><STRONG><a name="[113]"></a>pipe_thread_ready</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, pipes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipe_async_finish
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ready_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_pipe_get
</UL>

<P><STRONG><a name="[112]"></a>sys_dlist_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pipes.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_waitq_init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipe_xfer_prepare
</UL>

<P><STRONG><a name="[102]"></a>sys_dlist_is_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pipes.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_peek_head
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_get
</UL>

<P><STRONG><a name="[110]"></a>sys_dlist_peek_head</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pipes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipe_xfer_prepare
</UL>

<P><STRONG><a name="[106]"></a>k_stack_push</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, pipes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = k_stack_push &rArr; _impl_k_stack_push &rArr; _unpend_first_thread &rArr; _unpend_thread_no_timeout &rArr; _priq_dumb_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_stack_push
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pipes_module
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipe_async_free
</UL>

<P><STRONG><a name="[109]"></a>_waitq_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pipes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_init
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_pipe_init
</UL>

<P><STRONG><a name="[11b]"></a>sys_sflist_insert</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sys_sflist_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sflist_peek_tail
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sflist_peek_head
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;z_sflist_tail_set
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;z_sflist_head_set
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;z_sfnode_next_set
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_insert
</UL>

<P><STRONG><a name="[122]"></a>prepare_thread_to_run</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prepare_thread_to_run &rArr; _add_thread_to_ready_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_thread_to_ready_q
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_queue_append_list
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_queue_cancel_wait
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_insert
</UL>

<P><STRONG><a name="[124]"></a>queue_insert</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = queue_insert &rArr; z_thread_malloc &rArr; k_mem_pool_malloc &rArr; k_mem_pool_alloc &rArr; _pend_current_thread &rArr; pend &rArr; _add_thread_timeout &rArr; _add_timeout &rArr; _handle_one_expired_timeout &rArr; _ready_thread &rArr; _add_thread_to_ready_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;z_thread_malloc
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unpend_first_thread
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reschedule
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sfnode_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_thread_to_run
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sflist_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_queue_alloc_prepend
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_queue_alloc_append
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_queue_prepend
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_queue_append
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_queue_insert
</UL>

<P><STRONG><a name="[11d]"></a>z_sfnode_next_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_queue_append_list
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sflist_insert
</UL>

<P><STRONG><a name="[11e]"></a>z_sflist_head_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_queue_get
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_queue_append_list
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sflist_insert
</UL>

<P><STRONG><a name="[120]"></a>z_sflist_tail_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_queue_get
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_queue_append_list
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sflist_insert
</UL>

<P><STRONG><a name="[11c]"></a>sys_sflist_peek_head</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_queue_get
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sflist_insert
</UL>

<P><STRONG><a name="[11f]"></a>sys_sflist_peek_tail</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_queue_get
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_queue_append_list
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_queue_alloc_append
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_queue_append
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sflist_insert
</UL>

<P><STRONG><a name="[125]"></a>sys_sfnode_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_insert
</UL>

<P><STRONG><a name="[12e]"></a>do_sem_give</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unpend_first_thread
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_thread_to_ready_q
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increment_count_up_to_limit
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_sem_give
</UL>

<P><STRONG><a name="[12f]"></a>increment_count_up_to_limit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sem.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sem_give_non_preemptible
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sem_give
</UL>

<P><STRONG><a name="[52]"></a>k_sys_work_q_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, system_work_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = k_sys_work_q_init &rArr; k_work_q_start &rArr; _impl_k_thread_create &rArr; schedule_new_thread &rArr; _add_timeout &rArr; _handle_one_expired_timeout &rArr; _ready_thread &rArr; _add_thread_to_ready_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_work_q_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_work_q.o(.devconfig.init)
</UL>
<P><STRONG><a name="[14a]"></a>HAL_CLOCK_PLLSAIcmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gm_hal_clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_PeripheralClkSetConfig
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_ClockCmd
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_DeInit
</UL>

<P><STRONG><a name="[149]"></a>HAL_CLOCK_PLLI2Scmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gm_hal_clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_PeripheralClkSetConfig
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_ClockCmd
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_DeInit
</UL>

<P><STRONG><a name="[146]"></a>HAL_CLOCK_PLLKDPcmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gm_hal_clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_PeripheralClkSetConfig
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_SYSCLKConfig
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_ClockCmd
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_DeInit
</UL>

<P><STRONG><a name="[143]"></a>HAL_CLOCK_PLLcmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gm_hal_clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_PeripheralClkSetConfig
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_SYSCLKConfig
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_ClockCmd
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_DeInit
</UL>

<P><STRONG><a name="[148]"></a>HAL_CLOCK_LOSCcmd</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, gm_hal_clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_PeripheralClkSetConfig
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_ClockCmd
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_DeInit
</UL>

<P><STRONG><a name="[142]"></a>HAL_CLOCK_HOSCcmd</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, gm_hal_clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_PeripheralClkSetConfig
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_SYSCLKConfig
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_PLLsReferenceClock
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_ClockCmd
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_DeInit
</UL>

<P><STRONG><a name="[145]"></a>HAL_CLOCK_AdjustPLLKDPDefaultConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gm_hal_clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_PeripheralClkSetConfig
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_SYSCLKConfig
</UL>

<P><STRONG><a name="[141]"></a>HAL_CLOCK_HIRCcmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gm_hal_clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_PeripheralClkSetConfig
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_SYSCLKConfig
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_PLLsReferenceClock
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_ClockCmd
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_DeInit
</UL>

<P><STRONG><a name="[14c]"></a>HAL_CLOCK_LIRCcmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gm_hal_clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_PeripheralClkSetConfig
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CLOCK_ClockCmd
</UL>

<P><STRONG><a name="[15d]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Cstart
</UL>

<P><STRONG><a name="[13]"></a>bg_thread_main</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = bg_thread_main &rArr; _init_static_threads &rArr; schedule_new_thread &rArr; _add_timeout &rArr; _handle_one_expired_timeout &rArr; _ready_thread &rArr; _add_thread_to_ready_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printk
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_device_do_config_level
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_busy_wait
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_static_threads
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init.o(.text)
</UL>
<P><STRONG><a name="[153]"></a>init_idle_thread</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = init_idle_thread &rArr; _setup_new_thread &rArr; _new_thread &rArr; _init_thread_base
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mark_thread_as_started
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setup_new_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_multithreading
</UL>

<P><STRONG><a name="[156]"></a>prepare_multithreading</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = prepare_multithreading &rArr; init_idle_thread &rArr; _setup_new_thread &rArr; _new_thread &rArr; _init_thread_base
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_thread_to_ready_q
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mark_thread_as_started
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_idle_thread
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setup_new_thread
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_init
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Cstart
</UL>

<P><STRONG><a name="[158]"></a>switch_to_main_thread</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = switch_to_main_thread &rArr; _thread_entry &rArr; _impl_k_thread_abort &rArr; _k_thread_single_abort &rArr; _remove_thread_from_ready_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Cstart
</UL>

<P><STRONG><a name="[155]"></a>_mark_thread_as_started</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_multithreading
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_idle_thread
</UL>

<P><STRONG><a name="[178]"></a>sys_dlist_peek_next</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sched.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_priq_dumb_add
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_abort_timeout
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_timeout
</UL>

<P><STRONG><a name="[161]"></a>sys_dlist_append</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sched.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_priq_dumb_add
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_priq_mq_add
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_timeout
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_insert_before
</UL>

<P><STRONG><a name="[160]"></a>sys_dlist_insert_before</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sys_dlist_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_append
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_priq_dumb_add
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_timeout
</UL>

<P><STRONG><a name="[163]"></a>_is_thread_ready</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sched.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_priority_set
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ready_thread
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;should_preempt
</UL>

<P><STRONG><a name="[162]"></a>should_preempt</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = should_preempt
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_preempt
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_idle
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_thread_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cache
</UL>

<P><STRONG><a name="[168]"></a>next_up</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_priq_mq_best
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cache
</UL>

<P><STRONG><a name="[169]"></a>update_cache</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_up
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;should_preempt
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_sched_unlock
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_priority_set
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_thread_to_ready_q
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_remove_thread_from_ready_q
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_move_thread_to_end_of_prio_q
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_yield
</UL>

<P><STRONG><a name="[16f]"></a>k_spin_lock</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = k_spin_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_sched_unlock
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_priority_set
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_thread_to_ready_q
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unpend_thread_no_timeout
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_find_first_thread_to_unpend
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_thread_time_slicing
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_sched_lock
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_remove_thread_from_ready_q
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_move_thread_to_end_of_prio_q
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_yield
</UL>

<P><STRONG><a name="[174]"></a>pended_on</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sched.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unpend_thread_no_timeout
</UL>

<P><STRONG><a name="[176]"></a>_add_timeout</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _add_timeout &rArr; _handle_one_expired_timeout &rArr; _ready_thread &rArr; _add_thread_to_ready_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_one_expired_timeout
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_peek_head
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_insert_before
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_append
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_peek_next
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_thread_timeout
</UL>

<P><STRONG><a name="[17d]"></a>pend</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = pend &rArr; _add_thread_timeout &rArr; _add_timeout &rArr; _handle_one_expired_timeout &rArr; _ready_thread &rArr; _add_thread_to_ready_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_priq_dumb_add
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_remove_thread_from_ready_q
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_thread_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pend_thread
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pend_current_thread
</UL>

<P><STRONG><a name="[16d]"></a>sys_dlist_is_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sched.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_priq_mq_remove
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_peek_head
</UL>

<P><STRONG><a name="[167]"></a>sys_dlist_peek_head</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unpend_all
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_priq_dumb_add
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_priq_dumb_best
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_priq_mq_best
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_timeout
</UL>

<P><STRONG><a name="[16c]"></a>sys_dlist_remove</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sched.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_priq_dumb_remove
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_priq_mq_remove
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_abort_timeout
</UL>

<P><STRONG><a name="[171]"></a>_Swap</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Swap
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__swap
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_time_slice_before_swap
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_sleep
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reschedule
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pend_current_thread
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_yield
</UL>

<P><STRONG><a name="[165]"></a>_is_idle</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sched.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_yield
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;should_preempt
</UL>

<P><STRONG><a name="[164]"></a>_is_preempt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sched.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_is_preempt_thread
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_thread_time_slicing
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;should_preempt
</UL>

<P><STRONG><a name="[170]"></a>k_spin_unlock</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = k_spin_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_sched_unlock
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_priority_set
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_thread_to_ready_q
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unpend_thread_no_timeout
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_find_first_thread_to_unpend
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_thread_time_slicing
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_sched_lock
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_remove_thread_from_ready_q
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_move_thread_to_end_of_prio_q
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_yield
</UL>

<P><STRONG><a name="[172]"></a>_mark_thread_as_queued</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sched.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_thread_to_ready_q
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_move_thread_to_end_of_prio_q
</UL>

<P><STRONG><a name="[18a]"></a>_ready_thread</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _ready_thread &rArr; _add_thread_to_ready_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_thread_to_ready_q
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_thread_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unpend_all
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_wakeup
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_one_expired_timeout
</UL>

<P><STRONG><a name="[177]"></a>_handle_one_expired_timeout</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _handle_one_expired_timeout &rArr; _ready_thread &rArr; _add_thread_to_ready_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unpend_thread_no_timeout
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ready_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_timeout
</UL>

<P><STRONG><a name="[17f]"></a>_abort_thread_timeout</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _abort_thread_timeout &rArr; _abort_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_abort_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unpend_first_thread
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unpend_thread
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_wakeup
</UL>

<P><STRONG><a name="[17e]"></a>_add_thread_timeout</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _add_thread_timeout &rArr; _add_timeout &rArr; _handle_one_expired_timeout &rArr; _ready_thread &rArr; _add_thread_to_ready_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_sleep
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend
</UL>

<P><STRONG><a name="[190]"></a>_abort_timeout</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _abort_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_remove
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_peek_next
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_abort_thread_timeout
</UL>

<P><STRONG><a name="[199]"></a>sys_dlist_peek_head</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sys_clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_expired_timeouts
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_timeouts
</UL>

<P><STRONG><a name="[19a]"></a>sys_dlist_peek_next</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sys_clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_expired_timeouts
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_timeouts
</UL>

<P><STRONG><a name="[193]"></a>_handle_one_expired_timeout</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, sys_clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _handle_one_expired_timeout &rArr; _add_thread_to_ready_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_thread_to_ready_q
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unpend_thread_no_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_expired_timeouts
</UL>

<P><STRONG><a name="[198]"></a>handle_timeouts</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, sys_clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = handle_timeouts &rArr; _handle_expired_timeouts &rArr; _handle_one_expired_timeout &rArr; _add_thread_to_ready_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_expired_timeouts
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_remove
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_peek_next
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_peek_head
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nano_sys_clock_tick_announce
</UL>

<P><STRONG><a name="[19d]"></a>handle_time_slicing</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, sys_clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = handle_time_slicing &rArr; _move_thread_to_end_of_prio_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ticks_to_ms
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_thread_time_slicing
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_move_thread_to_end_of_prio_q
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nano_sys_clock_tick_announce
</UL>

<P><STRONG><a name="[19b]"></a>sys_dlist_remove</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys_clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_expired_timeouts
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_timeouts
</UL>

<P><STRONG><a name="[192]"></a>__ticks_to_ms</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, sys_clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __ticks_to_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_uptime_get_32
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_uptime_get
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_time_slicing
</UL>

<P><STRONG><a name="[19c]"></a>_handle_expired_timeouts</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, sys_clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _handle_expired_timeouts &rArr; _handle_one_expired_timeout &rArr; _add_thread_to_ready_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_remove
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_one_expired_timeout
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_peek_next
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_peek_head
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_timeouts
</UL>

<P><STRONG><a name="[1a6]"></a>sys_dlist_peek_head</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, thread.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_timeout
</UL>

<P><STRONG><a name="[1a8]"></a>sys_dlist_peek_next</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, thread.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_abort_timeout
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_timeout
</UL>

<P><STRONG><a name="[1a7]"></a>sys_dlist_append</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, thread.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_timeout
</UL>

<P><STRONG><a name="[19e]"></a>_is_thread_ready</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _is_thread_ready
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_thread_timeout_active
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_thread_single_abort
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_thread_single_suspend
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ready_thread
</UL>

<P><STRONG><a name="[1a4]"></a>_add_timeout</STRONG> (Thumb, 200 bytes, Stack size 56 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _add_timeout &rArr; _handle_one_expired_timeout &rArr; _ready_thread &rArr; _add_thread_to_ready_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_one_expired_timeout
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_append
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_peek_next
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_peek_head
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_new_thread
</UL>

<P><STRONG><a name="[1ab]"></a>schedule_new_thread</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = schedule_new_thread &rArr; _add_timeout &rArr; _handle_one_expired_timeout &rArr; _ready_thread &rArr; _add_thread_to_ready_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_thread_start
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_thread_create
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_static_threads
</UL>

<P><STRONG><a name="[19f]"></a>_is_thread_timeout_active</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, thread.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_thread_single_abort
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_thread_cancel
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_thread_ready
</UL>

<P><STRONG><a name="[1a3]"></a>_ready_thread</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _ready_thread &rArr; _add_thread_to_ready_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_thread_to_ready_q
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_thread_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_thread_single_resume
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_thread_start
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_one_expired_timeout
</UL>

<P><STRONG><a name="[1a2]"></a>_mark_thread_as_started</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, thread.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_thread_start
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_one_expired_timeout
</UL>

<P><STRONG><a name="[1a1]"></a>_has_thread_started</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, thread.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_thread_cancel
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_thread_start
</UL>

<P><STRONG><a name="[1a5]"></a>_handle_one_expired_timeout</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _handle_one_expired_timeout &rArr; _ready_thread &rArr; _add_thread_to_ready_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unpend_thread_no_timeout
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mark_thread_as_started
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ready_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_timeout
</UL>

<P><STRONG><a name="[1af]"></a>_abort_thread_timeout</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _abort_thread_timeout &rArr; _abort_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_abort_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_k_thread_single_abort
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_thread_cancel
</UL>

<P><STRONG><a name="[1b7]"></a>_abort_timeout</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _abort_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_peek_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_abort_thread_timeout
</UL>

<P><STRONG><a name="[1bb]"></a>sys_dlist_peek_head</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, work_q.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_timeout
</UL>

<P><STRONG><a name="[1bd]"></a>sys_dlist_peek_next</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, work_q.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_abort_timeout
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_timeout
</UL>

<P><STRONG><a name="[1bc]"></a>sys_dlist_append</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, work_q.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_timeout
</UL>

<P><STRONG><a name="[1b8]"></a>k_work_submit_to_queue</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, work_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = k_work_submit_to_queue &rArr; k_queue_append &rArr; queue_insert &rArr; z_thread_malloc &rArr; k_mem_pool_malloc &rArr; k_mem_pool_alloc &rArr; _pend_current_thread &rArr; pend &rArr; _add_thread_timeout &rArr; _add_timeout &rArr; _handle_one_expired_timeout &rArr; _ready_thread &rArr; _add_thread_to_ready_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_or
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_queue_append
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit_to_queue
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_timeout
</UL>

<P><STRONG><a name="[1b9]"></a>_handle_one_expired_timeout</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, work_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_thread_to_ready_q
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unpend_thread_no_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_timeout
</UL>

<P><STRONG><a name="[1ba]"></a>_add_timeout</STRONG> (Thumb, 200 bytes, Stack size 56 bytes, work_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_one_expired_timeout
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_append
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_peek_next
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_peek_head
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit_to_queue
</UL>

<P><STRONG><a name="[14]"></a>work_q_main</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, work_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = work_q_main &rArr; _impl_k_queue_get &rArr; _pend_current_thread &rArr; pend &rArr; _add_thread_timeout &rArr; _add_timeout &rArr; _handle_one_expired_timeout &rArr; _ready_thread &rArr; _add_thread_to_ready_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_and
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_queue_get
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_yield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> work_q.o(.text)
</UL>
<P><STRONG><a name="[15]"></a>work_timeout</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, work_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = work_timeout &rArr; k_work_submit_to_queue &rArr; k_queue_append &rArr; queue_insert &rArr; z_thread_malloc &rArr; k_mem_pool_malloc &rArr; k_mem_pool_alloc &rArr; _pend_current_thread &rArr; pend &rArr; _add_thread_timeout &rArr; _add_timeout &rArr; _handle_one_expired_timeout &rArr; _ready_thread &rArr; _add_thread_to_ready_q &rArr; update_cache &rArr; next_up &rArr; _priq_mq_best &rArr; sys_dlist_peek_head
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_work_submit_to_queue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> work_q.o(.text)
</UL>
<P><STRONG><a name="[1c0]"></a>sys_sflist_find_and_remove</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, work_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sflist_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_cancel
</UL>

<P><STRONG><a name="[1c1]"></a>_abort_timeout</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, work_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_peek_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_cancel
</UL>

<P><STRONG><a name="[1c3]"></a>sys_sflist_remove</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, work_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;z_sflist_tail_set
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;z_sfnode_next_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sflist_find_and_remove
</UL>

<P><STRONG><a name="[1c5]"></a>z_sfnode_next_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, work_q.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sflist_remove
</UL>

<P><STRONG><a name="[1c4]"></a>z_sflist_tail_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, work_q.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sflist_remove
</UL>

<P><STRONG><a name="[37]"></a>_nop_char_out</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, printk.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> printk.o(.data)
</UL>
<P><STRONG><a name="[1c8]"></a>_printk_hex_ulong</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, printk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printk_hex_ulong
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vprintk
</UL>

<P><STRONG><a name="[1c7]"></a>_printk_dec_ulong</STRONG> (Thumb, 168 bytes, Stack size 64 bytes, printk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printk_dec_ulong
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vprintk
</UL>

<P><STRONG><a name="[16]"></a>char_out</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, printk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = char_out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printk.o(.text)
</UL>
<P><STRONG><a name="[17]"></a>str_out</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, printk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = str_out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printk.o(.text)
</UL>
<P><STRONG><a name="[1d5]"></a>sys_dlist_append</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mempool.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_mem_pool_base_init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_break
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_free
</UL>

<P><STRONG><a name="[1cc]"></a>level_empty</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mempool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = level_empty
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_mem_pool_block_alloc
</UL>

<P><STRONG><a name="[1d4]"></a>block_ptr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mempool.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_mem_pool_base_init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_free
</UL>

<P><STRONG><a name="[1d9]"></a>block_num</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mempool.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_mem_pool_block_alloc
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_break
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_alloc
</UL>

<P><STRONG><a name="[1cf]"></a>get_bit_ptr</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mempool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_bit_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partner_bits
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_free_bit
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_free_bit
</UL>

<P><STRONG><a name="[1ce]"></a>set_free_bit</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, mempool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_free_bit &rArr; get_bit_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_mem_pool_base_init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_break
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_free
</UL>

<P><STRONG><a name="[1d0]"></a>clear_free_bit</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, mempool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = clear_free_bit &rArr; get_bit_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_free
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_alloc
</UL>

<P><STRONG><a name="[1d1]"></a>partner_bits</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, mempool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = partner_bits &rArr; get_bit_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_free
</UL>

<P><STRONG><a name="[1d3]"></a>buf_size</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mempool.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_fits
</UL>

<P><STRONG><a name="[1d2]"></a>block_fits</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mempool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = block_fits
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_size
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_break
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_free
</UL>

<P><STRONG><a name="[1d7]"></a>pool_irq_lock</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mempool.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_break
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_free
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_alloc
</UL>

<P><STRONG><a name="[1da]"></a>pool_irq_unlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mempool.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_break
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_free
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_alloc
</UL>

<P><STRONG><a name="[1d6]"></a>block_alloc</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, mempool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = block_alloc &rArr; clear_free_bit &rArr; get_bit_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_remove
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_is_empty
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pool_irq_unlock
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pool_irq_lock
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_free_bit
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_num
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_mem_pool_block_alloc
</UL>

<P><STRONG><a name="[1db]"></a>block_free</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, mempool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = block_free &rArr;  block_free (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_remove
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_free
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pool_irq_unlock
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pool_irq_lock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_fits
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partner_bits
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_free_bit
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_free_bit
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_ptr
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_append
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_mem_pool_block_free
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_free
</UL>

<P><STRONG><a name="[1dc]"></a>block_break</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, mempool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = block_break &rArr; set_free_bit &rArr; get_bit_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pool_irq_unlock
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pool_irq_lock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_fits
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_free_bit
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_num
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dlist_append
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_mem_pool_block_alloc
</UL>

<P><STRONG><a name="[1cd]"></a>sys_dlist_is_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mempool.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_alloc
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_empty
</UL>

<P><STRONG><a name="[1d8]"></a>sys_dlist_remove</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mempool.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_free
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_alloc
</UL>

<P><STRONG><a name="[1e0]"></a>k_mutex_lock</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mempool.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mem_pool_free
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mem_pool_alloc
</UL>

<P><STRONG><a name="[1e1]"></a>k_mutex_unlock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mempool.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_k_mutex_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mem_pool_free
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mem_pool_alloc
</UL>

<P><STRONG><a name="[38]"></a>_stdout_hook_default</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stdout_console.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stdout_console.o(.data)
</UL>
<P><STRONG><a name="[1f6]"></a>sys_power_save_idle</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, idle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = sys_power_save_idle
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_cpu_idle
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle
</UL>

<P><STRONG><a name="[1fc]"></a>get_child</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rb.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_remove
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rb_get_minmax
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rb_foreach_next
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_contains
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rb_child
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rb_walk
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_left_limb
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_missing_black
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_extra_red
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_side
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_and_stack
</UL>

<P><STRONG><a name="[1ff]"></a>set_child</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, rb.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_remove
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_insert
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_missing_black
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate
</UL>

<P><STRONG><a name="[1f9]"></a>get_color</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rb.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_remove
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_missing_black
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_red
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_black
</UL>

<P><STRONG><a name="[1f8]"></a>is_black</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_color
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_remove
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rb_is_black
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_missing_black
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_extra_red
</UL>

<P><STRONG><a name="[1fa]"></a>is_red</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_color
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_remove
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_missing_black
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_extra_red
</UL>

<P><STRONG><a name="[201]"></a>set_color</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rb.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_remove
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_insert
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_missing_black
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_extra_red
</UL>

<P><STRONG><a name="[1fb]"></a>find_and_stack</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, rb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_child
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_remove
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_insert
</UL>

<P><STRONG><a name="[1fd]"></a>get_side</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_child
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_remove
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_missing_black
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_extra_red
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate
</UL>

<P><STRONG><a name="[1fe]"></a>rotate</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, rb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_side
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_child
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_child
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_missing_black
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_extra_red
</UL>

<P><STRONG><a name="[200]"></a>fix_extra_red</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, rb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_side
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_color
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_red
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_black
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_child
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_insert
</UL>

<P><STRONG><a name="[202]"></a>fix_missing_black</STRONG> (Thumb, 404 bytes, Stack size 56 bytes, rb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_side
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_color
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_red
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_black
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_color
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_child
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_child
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_remove
</UL>

<P><STRONG><a name="[207]"></a>stack_left_limb</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, rb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_child
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rb_foreach_next
</UL>

<P><STRONG><a name="[213]"></a>_FaultShow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fault.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FaultHandle
</UL>

<P><STRONG><a name="[20c]"></a>_MpuFaultIsRecoverable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fault.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MpuFault
</UL>

<P><STRONG><a name="[20b]"></a>_MpuFault</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, fault.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _MpuFault &rArr; printk &rArr; vprintk &rArr; _vprintk &rArr; _printk_dec_ulong
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printk
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MpuFaultIsRecoverable
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FaultHandle
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HardFault
</UL>

<P><STRONG><a name="[20d]"></a>_BusFault</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, fault.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _BusFault &rArr; printk &rArr; vprintk &rArr; _vprintk &rArr; _printk_dec_ulong
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printk
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FaultHandle
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HardFault
</UL>

<P><STRONG><a name="[20e]"></a>_UsageFault</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fault.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _UsageFault &rArr; printk &rArr; vprintk &rArr; _vprintk &rArr; _printk_dec_ulong
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printk
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FaultHandle
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HardFault
</UL>

<P><STRONG><a name="[20f]"></a>_DebugMonitor</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fault.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _DebugMonitor &rArr; printk &rArr; vprintk &rArr; _vprintk &rArr; _printk_dec_ulong
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printk
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FaultHandle
</UL>

<P><STRONG><a name="[210]"></a>_HardFault</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, fault.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _HardFault &rArr; _MpuFault &rArr; printk &rArr; vprintk &rArr; _vprintk &rArr; _printk_dec_ulong
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printk
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UsageFault
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BusFault
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MpuFault
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FaultHandle
</UL>

<P><STRONG><a name="[211]"></a>_ReservedException</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fault.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _ReservedException &rArr; printk &rArr; vprintk &rArr; _vprintk &rArr; _printk_dec_ulong
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printk
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FaultHandle
</UL>

<P><STRONG><a name="[212]"></a>_FaultHandle</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, fault.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _FaultHandle &rArr; _HardFault &rArr; _MpuFault &rArr; printk &rArr; vprintk &rArr; _vprintk &rArr; _printk_dec_ulong
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReservedException
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HardFault
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DebugMonitor
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UsageFault
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BusFault
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MpuFault
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FaultShow
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Fault
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
